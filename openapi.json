{
  "components": {
    "schemas": {
      "New basic_account": {
        "description": "Structure returned when creating (POST) a new basic_account",
        "example": { "oid": 0 },
        "properties": {
          "oid": { "description": "basic_account ID", "type": "integer" }
        },
        "title": "New basic_account",
        "type": "object"
      },
      "New card": {
        "description": "Structure returned when creating (POST) a new card",
        "example": { "oid": 0 },
        "properties": {
          "oid": { "description": "card ID", "type": "integer" }
        },
        "title": "New card",
        "type": "object"
      },
      "New country": {
        "description": "Structure returned when creating (POST) a new country",
        "example": { "oid": "oid" },
        "properties": {
          "oid": { "description": "country ID", "type": "string" }
        },
        "title": "New country",
        "type": "object"
      },
      "New currency": {
        "description": "Structure returned when creating (POST) a new currency",
        "example": { "oid": "oid" },
        "properties": {
          "oid": { "description": "currency ID", "type": "string" }
        },
        "title": "New currency",
        "type": "object"
      },
      "New master_account": {
        "description": "Structure returned when creating (POST) a new master_account",
        "example": { "oid": 0 },
        "properties": {
          "oid": { "description": "master_account ID", "type": "integer" }
        },
        "title": "New master_account",
        "type": "object"
      },
      "New memo": {
        "description": "Structure returned when creating (POST) a new memo",
        "example": { "oid": 0 },
        "properties": {
          "oid": { "description": "memo ID", "type": "integer" }
        },
        "title": "New memo",
        "type": "object"
      },
      "New organization": {
        "description": "Structure returned when creating (POST) a new organization",
        "example": { "oid": 0 },
        "properties": {
          "oid": { "description": "organization ID", "type": "integer" }
        },
        "title": "New organization",
        "type": "object"
      },
      "New person": {
        "description": "Structure returned when creating (POST) a new person",
        "example": { "oid": 0 },
        "properties": {
          "oid": { "description": "person ID", "type": "integer" }
        },
        "title": "New person",
        "type": "object"
      },
      "New person_role": {
        "description": "Structure returned when creating (POST) a new person_role",
        "example": { "oid": 0 },
        "properties": {
          "oid": { "description": "person_role ID", "type": "integer" }
        },
        "title": "New person_role",
        "type": "object"
      },
      "New tag": {
        "description": "Structure returned when creating (POST) a new tag",
        "example": { "oid": 0 },
        "properties": { "oid": { "description": "tag ID", "type": "integer" } },
        "title": "New tag",
        "type": "object"
      },
      "New user": {
        "description": "Structure returned when creating (POST) a new user",
        "example": { "oid": 0 },
        "properties": {
          "oid": { "description": "user ID", "type": "integer" }
        },
        "title": "New user",
        "type": "object"
      },
      "basic_account": {
        "example": {
          "addresses": {},
          "bank_iban": "bank_iban",
          "bank_name": "bank_name",
          "basic_document_url": "basic_document_url",
          "billing_bank_account": "billing_bank_account",
          "changed_by": "changed_by",
          "changed_on": "2000-01-23T04:56:07+00:00",
          "cis_number": "cis_number",
          "cis_open_date": "2000-01-23",
          "company_name": "company_name",
          "compliance_risk_score": "compliance_risk_score",
          "created_by": "created_by",
          "created_on": "2000-01-23T04:56:07+00:00",
          "dd_enabled": true,
          "foundation_date": "2000-01-23",
          "hr_registration_date": "2000-01-23",
          "hr_registration_number": "hr_registration_number",
          "id": 0,
          "last_payment_amount": 6.0274563,
          "legal_form": "Limited",
          "main_stock_exchange": "main_stock_exchange",
          "master_account_id": 1,
          "max_bca_limit": 5.962134,
          "noga_code": "noga_code",
          "noga_description": "noga_description",
          "operational_activity": "operational_activity",
          "parent": 5,
          "payment_type": "CBCP",
          "private_expenses_allowed": true,
          "product": "Corporate",
          "share_capital": 2.302136,
          "status": "Active",
          "stock_exchange": "stock_exchange",
          "stock_exchange_code": "stock_exchange_code",
          "tags": [7, 7]
        },
        "properties": {
          "addresses": {
            "description": "to be documented",
            "nullable": true,
            "title": "addresses",
            "type": "object",
            "x-nullable": true
          },
          "bank_iban": {
            "description": "to be documented",
            "nullable": true,
            "title": "bank_iban",
            "type": "string",
            "x-nullable": true
          },
          "bank_name": {
            "description": "to be documented",
            "nullable": true,
            "title": "bank_name",
            "type": "string",
            "x-nullable": true
          },
          "basic_document_url": { "readOnly": true, "type": "string" },
          "billing_bank_account": {
            "description": " Bank Account for Billing / Payment",
            "title": "billing_bank_account",
            "type": "string"
          },
          "changed_by": {
            "description": "User name/email of the user who last changed the record via API",
            "readOnly": true,
            "title": "changed_by",
            "type": "string"
          },
          "changed_on": {
            "description": "Timestamp on which the record was last changed, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "changed_on",
            "type": "string"
          },
          "cis_number": {
            "description": "Foreign ID / Alias of CS CIS Number (Company / Master)",
            "nullable": true,
            "title": "cis_number",
            "type": "string",
            "x-nullable": true
          },
          "cis_open_date": {
            "description": "to be documented",
            "format": "date",
            "nullable": true,
            "title": "cis_open_date",
            "type": "string",
            "x-nullable": true
          },
          "company_name": {
            "description": "Company Full Name",
            "title": "company_name",
            "type": "string"
          },
          "compliance_risk_score": {
            "description": "to be documented",
            "nullable": true,
            "title": "compliance_risk_score",
            "type": "string",
            "x-nullable": true
          },
          "created_by": {
            "description": "User name/email of the user who inserted the record via API",
            "readOnly": true,
            "title": "created_by",
            "type": "string"
          },
          "created_on": {
            "description": "Timestamp on which the record was created, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "created_on",
            "type": "string"
          },
          "dd_enabled": {
            "description": "Flag to explain whether account is enabled for direct debit",
            "nullable": true,
            "title": "dd_enabled",
            "type": "boolean",
            "x-nullable": true
          },
          "foundation_date": {
            "description": "Company Foundation Date",
            "format": "date",
            "title": "foundation_date",
            "type": "string"
          },
          "hr_registration_date": {
            "description": "to be documented",
            "format": "date",
            "nullable": true,
            "title": "hr_registration_date",
            "type": "string",
            "x-nullable": true
          },
          "hr_registration_number": {
            "description": "to be documented",
            "nullable": true,
            "title": "hr_registration_number",
            "type": "string",
            "x-nullable": true
          },
          "id": {
            "description": "to be documented",
            "readOnly": true,
            "title": "id",
            "type": "integer"
          },
          "last_payment_amount": {
            "description": "Ammount of last known payment (on account level)",
            "format": "float",
            "nullable": true,
            "title": "last_payment_amount",
            "type": "number",
            "x-nullable": true
          },
          "legal_form": {
            "description": "Legal form of Company",
            "enum": ["Limited", "Listed", "Single Owner"],
            "title": "legal_form",
            "type": "string"
          },
          "main_stock_exchange": {
            "description": "Stock Exchange where Company's Ultimate Parent is listed",
            "title": "main_stock_exchange",
            "type": "string"
          },
          "master_account_id": {
            "description": "Account FK to Company / Master Account",
            "title": "master_account_id",
            "type": "integer"
          },
          "max_bca_limit": {
            "description": "to be documented",
            "format": "float",
            "nullable": true,
            "title": "max_bca_limit",
            "type": "number",
            "x-nullable": true
          },
          "noga_code": {
            "description": "Company Industry Classification along NOGA Code standard",
            "title": "noga_code",
            "type": "string"
          },
          "noga_description": {
            "description": "Company Industry Classification along NOGA description",
            "title": "noga_description",
            "type": "string"
          },
          "operational_activity": {
            "description": "to be documented",
            "nullable": true,
            "title": "operational_activity",
            "type": "string",
            "x-nullable": true
          },
          "parent": {
            "description": "ID of direct Parent Company / Parent Master",
            "title": "parent",
            "type": "integer"
          },
          "payment_type": {
            "description": "Account Payment Type - central / decentral billing / payment",
            "enum": ["CBCP", "CBDP", "DBDP"],
            "title": "payment_type",
            "type": "string"
          },
          "private_expenses_allowed": {
            "description": "Flag to mark whether private expenses are allowed",
            "nullable": true,
            "title": "private_expenses_allowed",
            "type": "boolean",
            "x-nullable": true
          },
          "product": {
            "description": "Account Product - based on enum",
            "enum": ["Corporate", "Purchasing", "Meeting", "BTA", "VPayment"],
            "title": "product",
            "type": "string"
          },
          "share_capital": {
            "description": "to be documented",
            "format": "float",
            "nullable": true,
            "title": "share_capital",
            "type": "number",
            "x-nullable": true
          },
          "status": {
            "description": "Current Status of Basic Account",
            "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
            "title": "status",
            "type": "string"
          },
          "stock_exchange": {
            "description": "Stock Exchange where Company is listed",
            "title": "stock_exchange",
            "type": "string"
          },
          "stock_exchange_code": {
            "description": "to be documented",
            "nullable": true,
            "title": "stock_exchange_code",
            "type": "string",
            "x-nullable": true
          },
          "tags": { "items": { "type": "integer" }, "type": "array" }
        },
        "required": [
          "billing_bank_account",
          "company_name",
          "foundation_date",
          "legal_form",
          "main_stock_exchange",
          "master_account_id",
          "noga_code",
          "noga_description",
          "parent",
          "payment_type",
          "product",
          "status",
          "stock_exchange"
        ],
        "type": "object"
      },
      "card": {
        "example": {
          "basic_account_id": 0,
          "bundle_code": "bundle_code",
          "bundle_number": 6,
          "cancel_reason_code": "cancel_reason_code",
          "card_close_date": "2000-01-23",
          "card_limit": 1.4658129,
          "card_number": "card_number",
          "card_status": "Active",
          "card_type": "card_type",
          "card_type_translated": "card_type_translated",
          "card_valid_from": "2000-01-23",
          "card_valid_until": "2000-01-23",
          "changed_by": "changed_by",
          "changed_on": "2000-01-23T04:56:07+00:00",
          "created_by": "created_by",
          "created_on": "2000-01-23T04:56:07+00:00",
          "embosser_name": "embosser_name",
          "fee_type": "fee_type",
          "id": 5,
          "last_fee_code": "last_fee_code",
          "last_fee_date": "2000-01-23",
          "master_account_id": 5,
          "next_fee_date": "2000-01-23",
          "product_id": "product_id",
          "renewal_code": "renewal_code",
          "renewal_fee_amount": 2.302136,
          "status": "Active",
          "tags": [7, 7]
        },
        "properties": {
          "basic_account_id": {
            "description": "Account FK to Basic Account",
            "title": "basic_account_id",
            "type": "integer"
          },
          "bundle_code": {
            "description": "Product / Card Bundle Code",
            "title": "bundle_code",
            "type": "string"
          },
          "bundle_number": {
            "description": "Product / Card Bundle Number",
            "title": "bundle_number",
            "type": "integer"
          },
          "cancel_reason_code": {
            "description": "Reason why product was canceled - possible enum",
            "title": "cancel_reason_code",
            "type": "string"
          },
          "card_close_date": {
            "description": "Card Closed Date",
            "format": "date",
            "nullable": true,
            "title": "card_close_date",
            "type": "string",
            "x-nullable": true
          },
          "card_limit": {
            "description": "Card Limit Ammount (on card level)",
            "format": "float",
            "nullable": true,
            "title": "card_limit",
            "type": "number",
            "x-nullable": true
          },
          "card_number": {
            "description": "Card Number of ",
            "nullable": true,
            "title": "card_number",
            "type": "string",
            "x-nullable": true
          },
          "card_status": {
            "description": "Current Status of Card",
            "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
            "title": "card_status",
            "type": "string"
          },
          "card_type": {
            "description": "Card Type - possible enum candidate - debit / business",
            "title": "card_type",
            "type": "string"
          },
          "card_type_translated": {
            "description": "Card Type translated (how) - possible enum candidate",
            "title": "card_type_translated",
            "type": "string"
          },
          "card_valid_from": {
            "description": "Card Valid from Date",
            "format": "date",
            "nullable": true,
            "title": "card_valid_from",
            "type": "string",
            "x-nullable": true
          },
          "card_valid_until": {
            "description": "Card Valid until Date",
            "format": "date",
            "nullable": true,
            "title": "card_valid_until",
            "type": "string",
            "x-nullable": true
          },
          "changed_by": {
            "description": "User name/email of the user who last changed the record via API",
            "readOnly": true,
            "title": "changed_by",
            "type": "string"
          },
          "changed_on": {
            "description": "Timestamp on which the record was last changed, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "changed_on",
            "type": "string"
          },
          "created_by": {
            "description": "User name/email of the user who inserted the record via API",
            "readOnly": true,
            "title": "created_by",
            "type": "string"
          },
          "created_on": {
            "description": "Timestamp on which the record was created, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "created_on",
            "type": "string"
          },
          "embosser_name": {
            "description": "Card which name is embossed on card",
            "title": "embosser_name",
            "type": "string"
          },
          "fee_type": {
            "description": "Product / Card Fee Type - possible enum candidate",
            "title": "fee_type",
            "type": "string"
          },
          "id": {
            "description": "to be documented",
            "readOnly": true,
            "title": "id",
            "type": "integer"
          },
          "last_fee_code": {
            "description": "Product / Card last fee code - possible enum",
            "title": "last_fee_code",
            "type": "string"
          },
          "last_fee_date": {
            "description": "Card Closed Date",
            "format": "date",
            "nullable": true,
            "title": "last_fee_date",
            "type": "string",
            "x-nullable": true
          },
          "master_account_id": {
            "description": "Account FK to Company / Master Account",
            "title": "master_account_id",
            "type": "integer"
          },
          "next_fee_date": {
            "description": "Card Closed Date",
            "format": "date",
            "nullable": true,
            "title": "next_fee_date",
            "type": "string",
            "x-nullable": true
          },
          "product_id": {
            "description": "Product code - 10 variants - possible enum",
            "title": "product_id",
            "type": "string"
          },
          "renewal_code": {
            "description": "Product / Card renewal code - possible enum - 01 - 03",
            "title": "renewal_code",
            "type": "string"
          },
          "renewal_fee_amount": {
            "description": "Fee Ammount upon renewal (on card level)",
            "format": "float",
            "nullable": true,
            "title": "renewal_fee_amount",
            "type": "number",
            "x-nullable": true
          },
          "status": {
            "description": "Current Status of Basic Account",
            "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
            "title": "status",
            "type": "string"
          },
          "tags": { "items": { "type": "integer" }, "type": "array" }
        },
        "required": [
          "basic_account_id",
          "bundle_code",
          "bundle_number",
          "cancel_reason_code",
          "card_status",
          "card_type",
          "card_type_translated",
          "embosser_name",
          "fee_type",
          "last_fee_code",
          "master_account_id",
          "product_id",
          "renewal_code",
          "status"
        ],
        "type": "object"
      },
      "country": {
        "example": {
          "changed_by": "changed_by",
          "changed_on": "2000-01-23T04:56:07+00:00",
          "country_iso": "country_iso",
          "created_by": "created_by",
          "created_on": "2000-01-23T04:56:07+00:00",
          "eu_member": true,
          "high_risk_country_flag": "standard risk",
          "id": "id",
          "name_long": "name_long",
          "name_short": "name_short",
          "sepa_member": true,
          "un_member": true,
          "valid_from": "2000-01-23"
        },
        "properties": {
          "changed_by": {
            "description": "User name/email of the user who last changed the record via API",
            "readOnly": true,
            "title": "changed_by",
            "type": "string"
          },
          "changed_on": {
            "description": "Timestamp on which the record was last changed, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "changed_on",
            "type": "string"
          },
          "country_iso": {
            "description": "to be documented",
            "nullable": true,
            "title": "country_iso",
            "type": "string",
            "x-nullable": true
          },
          "created_by": {
            "description": "User name/email of the user who inserted the record via API",
            "readOnly": true,
            "title": "created_by",
            "type": "string"
          },
          "created_on": {
            "description": "Timestamp on which the record was created, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "created_on",
            "type": "string"
          },
          "eu_member": {
            "description": "to be documented",
            "nullable": true,
            "title": "eu_member",
            "type": "boolean",
            "x-nullable": true
          },
          "high_risk_country_flag": {
            "description": "to be documented",
            "enum": ["standard risk", "high risk", "prohibited"],
            "nullable": true,
            "title": "high_risk_country_flag",
            "type": "string",
            "x-nullable": true
          },
          "id": {
            "description": "to be documented",
            "title": "id",
            "type": "string"
          },
          "name_long": {
            "description": "to be documented",
            "nullable": true,
            "title": "name_long",
            "type": "string",
            "x-nullable": true
          },
          "name_short": {
            "description": "to be documented",
            "nullable": true,
            "title": "name_short",
            "type": "string",
            "x-nullable": true
          },
          "sepa_member": {
            "description": "to be documented",
            "nullable": true,
            "title": "sepa_member",
            "type": "boolean",
            "x-nullable": true
          },
          "un_member": {
            "description": "to be documented",
            "nullable": true,
            "title": "un_member",
            "type": "boolean",
            "x-nullable": true
          },
          "valid_from": {
            "description": "to be documented",
            "format": "date",
            "nullable": true,
            "title": "valid_from",
            "type": "string",
            "x-nullable": true
          }
        },
        "required": ["id"],
        "type": "object"
      },
      "currency": {
        "example": {
          "changed_by": "changed_by",
          "changed_on": "2000-01-23T04:56:07+00:00",
          "created_by": "created_by",
          "created_on": "2000-01-23T04:56:07+00:00",
          "currency_type": "Fiat",
          "factor": 0.8008282,
          "id": "id",
          "issuer_country_iso3": "issuer_country_iso3",
          "name": "name",
          "valid_from": "2000-01-23"
        },
        "properties": {
          "changed_by": {
            "description": "User name/email of the user who last changed the record via API",
            "readOnly": true,
            "title": "changed_by",
            "type": "string"
          },
          "changed_on": {
            "description": "Timestamp on which the record was last changed, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "changed_on",
            "type": "string"
          },
          "created_by": {
            "description": "User name/email of the user who inserted the record via API",
            "readOnly": true,
            "title": "created_by",
            "type": "string"
          },
          "created_on": {
            "description": "Timestamp on which the record was created, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "created_on",
            "type": "string"
          },
          "currency_type": {
            "description": "to be documented",
            "enum": ["Fiat", "Precious Metal", "Crypto"],
            "nullable": true,
            "title": "currency_type",
            "type": "string",
            "x-nullable": true
          },
          "factor": {
            "description": "to be documented",
            "format": "float",
            "nullable": true,
            "title": "factor",
            "type": "number",
            "x-nullable": true
          },
          "id": {
            "description": "to be documented",
            "title": "id",
            "type": "string"
          },
          "issuer_country_iso3": {
            "description": "to be documented",
            "nullable": true,
            "title": "issuer_country_iso3",
            "type": "string",
            "x-nullable": true
          },
          "name": {
            "description": "to be documented",
            "nullable": true,
            "title": "name",
            "type": "string",
            "x-nullable": true
          },
          "valid_from": {
            "description": "to be documented",
            "format": "date",
            "nullable": true,
            "title": "valid_from",
            "type": "string",
            "x-nullable": true
          }
        },
        "required": ["id"],
        "type": "object"
      },
      "master_account": {
        "example": {
          "changed_by": "changed_by",
          "changed_on": "2000-01-23T04:56:07+00:00",
          "company_name": "company_name",
          "compliance_risk_score": "compliance_risk_score",
          "created_by": "created_by",
          "created_on": "2000-01-23T04:56:07+00:00",
          "global_limit": 0.8008282,
          "id": 6,
          "master_document_url": "master_document_url",
          "mc_number": "mc_number",
          "noga_code": "noga_code",
          "register_id": "register_id",
          "register_type": "register_type",
          "status": "Active",
          "tags": [1, 1]
        },
        "properties": {
          "changed_by": {
            "description": "User name/email of the user who last changed the record via API",
            "readOnly": true,
            "title": "changed_by",
            "type": "string"
          },
          "changed_on": {
            "description": "Timestamp on which the record was last changed, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "changed_on",
            "type": "string"
          },
          "company_name": {
            "description": "Company Full Name",
            "title": "company_name",
            "type": "string"
          },
          "compliance_risk_score": {
            "description": "to be documented",
            "title": "compliance_risk_score",
            "type": "string"
          },
          "created_by": {
            "description": "User name/email of the user who inserted the record via API",
            "readOnly": true,
            "title": "created_by",
            "type": "string"
          },
          "created_on": {
            "description": "Timestamp on which the record was created, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "created_on",
            "type": "string"
          },
          "global_limit": {
            "description": "Global Limit Ammount (on company level)",
            "format": "float",
            "nullable": true,
            "title": "global_limit",
            "type": "number",
            "x-nullable": true
          },
          "id": {
            "description": "to be documented",
            "readOnly": true,
            "title": "id",
            "type": "integer"
          },
          "master_document_url": { "readOnly": true, "type": "string" },
          "mc_number": {
            "description": "to be documented",
            "nullable": true,
            "title": "mc_number",
            "type": "string",
            "x-nullable": true
          },
          "noga_code": {
            "description": "Company Industry Classification along NOGA Code standard",
            "title": "noga_code",
            "type": "string"
          },
          "register_id": {
            "description": "to be documented",
            "title": "register_id",
            "type": "string"
          },
          "register_type": {
            "description": "to be documented",
            "title": "register_type",
            "type": "string"
          },
          "status": {
            "description": "Current Status of Company / Master Account",
            "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
            "title": "status",
            "type": "string"
          },
          "tags": { "items": { "type": "integer" }, "type": "array" }
        },
        "required": [
          "company_name",
          "compliance_risk_score",
          "noga_code",
          "register_id",
          "register_type",
          "status"
        ],
        "type": "object"
      },
      "memo": {
        "example": {
          "basic_accounts": [0, 0],
          "cards": [6, 6],
          "changed_by": "changed_by",
          "changed_on": "2000-01-23T04:56:07+00:00",
          "created_by": "created_by",
          "created_on": "2000-01-23T04:56:07+00:00",
          "desccription": "desccription",
          "id": 1,
          "master_accounts": [5, 5],
          "owner": [5, 5],
          "persons": [2, 2],
          "subject": "subject",
          "tags": [7, 7],
          "type": "Billing"
        },
        "properties": {
          "basic_accounts": { "items": { "type": "integer" }, "type": "array" },
          "cards": { "items": { "type": "integer" }, "type": "array" },
          "changed_by": {
            "description": "User name/email of the user who last changed the record via API",
            "readOnly": true,
            "title": "changed_by",
            "type": "string"
          },
          "changed_on": {
            "description": "Timestamp on which the record was last changed, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "changed_on",
            "type": "string"
          },
          "created_by": {
            "description": "User name/email of the user who inserted the record via API",
            "readOnly": true,
            "title": "created_by",
            "type": "string"
          },
          "created_on": {
            "description": "Timestamp on which the record was created, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "created_on",
            "type": "string"
          },
          "desccription": {
            "description": "Memo Description / Details",
            "nullable": true,
            "title": "desccription",
            "type": "string",
            "x-nullable": true
          },
          "id": {
            "description": "to be documented",
            "readOnly": true,
            "title": "id",
            "type": "integer"
          },
          "master_accounts": {
            "items": { "type": "integer" },
            "type": "array"
          },
          "owner": { "items": { "type": "integer" }, "type": "array" },
          "persons": { "items": { "type": "integer" }, "type": "array" },
          "subject": {
            "description": "Memo Subject Line / Heading",
            "nullable": true,
            "title": "subject",
            "type": "string",
            "x-nullable": true
          },
          "tags": { "items": { "type": "integer" }, "type": "array" },
          "type": {
            "description": "Memo Type",
            "enum": [
              "Billing",
              "MDE AMLA",
              "MDE other",
              "Data Quality",
              "Client Request",
              "Compliance Request"
            ],
            "title": "type",
            "type": "string"
          }
        },
        "required": ["type"],
        "type": "object"
      },
      "organization": {
        "example": {
          "changed_by": "changed_by",
          "changed_on": "2000-01-23T04:56:07+00:00",
          "created_by": "created_by",
          "created_on": "2000-01-23T04:56:07+00:00",
          "id": 0,
          "name": "name",
          "owner": "owner",
          "users": [6, 6]
        },
        "properties": {
          "changed_by": {
            "description": "User name/email of the user who last changed the record via API",
            "readOnly": true,
            "title": "changed_by",
            "type": "string"
          },
          "changed_on": {
            "description": "Timestamp on which the record was last changed, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "changed_on",
            "type": "string"
          },
          "created_by": {
            "description": "User name/email of the user who inserted the record via API",
            "readOnly": true,
            "title": "created_by",
            "type": "string"
          },
          "created_on": {
            "description": "Timestamp on which the record was created, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "created_on",
            "type": "string"
          },
          "id": {
            "description": "ID of organisation which user belong to",
            "readOnly": true,
            "title": "id",
            "type": "integer"
          },
          "name": {
            "description": "Name of organisation which user belong to",
            "title": "name",
            "type": "string"
          },
          "owner": {
            "description": "Owner of organisation which user belong to",
            "title": "owner",
            "type": "string"
          },
          "users": { "items": { "type": "integer" }, "type": "array" }
        },
        "required": ["name", "owner"],
        "type": "object"
      },
      "person": {
        "example": {
          "addresses": [
            {
              "address_type": "company address",
              "city": "city",
              "country_iso3": "country_iso3",
              "country_name": "country_name",
              "line1": "line1",
              "line2": "line2",
              "line3": "line3",
              "state": "state",
              "zip_code": "zip_code"
            },
            {
              "address_type": "company address",
              "city": "city",
              "country_iso3": "country_iso3",
              "country_name": "country_name",
              "line1": "line1",
              "line2": "line2",
              "line3": "line3",
              "state": "state",
              "zip_code": "zip_code"
            }
          ],
          "ap_number_apr": "ap_number_apr",
          "branch": "branch",
          "card_number_care": "card_number_care",
          "ch_residency_since": "2000-01-23",
          "changed_by": "changed_by",
          "changed_on": "2000-01-23T04:56:07+00:00",
          "cis_number": "cis_number",
          "client_type_commercial": "A",
          "client_type_consumer": "A",
          "consent_email": "consent_email",
          "consent_mobile": "consent_mobile",
          "crc": "crc",
          "created_by": "created_by",
          "created_on": "2000-01-23T04:56:07+00:00",
          "cs_assets": 0.8008282,
          "cs_assets_since": "2000-01-23",
          "date_of_birth": "2000-01-23",
          "department": "department",
          "ebak_date": "2000-01-23",
          "ebak_type": "ebak_type",
          "email": "email",
          "employed_since": "2000-01-23",
          "employer": "employer",
          "employment_type": "employment_type",
          "first_name": "first_name",
          "gender": "female",
          "id": 6,
          "id_document_number": "id_document_number",
          "id_document_type": "id_document_type",
          "income_change_date": "2000-01-23",
          "income_gross_annual": 1.4658129,
          "language": "german",
          "last_name": "last_name",
          "marital_status": "single",
          "nationalities": ["nationalities", "nationalities"],
          "occupation": "occupation",
          "permit_since": "2000-01-23",
          "permit_type": "None",
          "person_document_url": "person_document_url",
          "phone_business": "phone_business",
          "phone_business_mobile": "phone_business_mobile",
          "phone_mobile": "phone_mobile",
          "phone_private": "phone_private",
          "reference_ch_iban": "reference_ch_iban",
          "salutation": "salutation",
          "status": "Active",
          "swisscard_employee": "Regular",
          "tags": [5, 5],
          "third_party_assets": 5.637377,
          "third_party_assets_since": "2000-01-23",
          "title": "title"
        },
        "properties": {
          "addresses": {
            "items": { "$ref": "#/components/schemas/person_addresses" },
            "nullable": true,
            "type": "array",
            "x-nullable": true
          },
          "ap_number_apr": {
            "description": "to be documented",
            "nullable": true,
            "title": "ap_number_apr",
            "type": "string",
            "x-nullable": true
          },
          "branch": {
            "description": "Person branch affiliation => Bank or Employer?",
            "nullable": true,
            "title": "branch",
            "type": "string",
            "x-nullable": true
          },
          "card_number_care": {
            "description": "to be documented",
            "nullable": true,
            "title": "card_number_care",
            "type": "string",
            "x-nullable": true
          },
          "ch_residency_since": {
            "description": "Person's first date of Swiss residency",
            "format": "date",
            "title": "ch_residency_since",
            "type": "string"
          },
          "changed_by": {
            "description": "User name/email of the user who last changed the record via API",
            "readOnly": true,
            "title": "changed_by",
            "type": "string"
          },
          "changed_on": {
            "description": "Timestamp on which the record was last changed, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "changed_on",
            "type": "string"
          },
          "cis_number": {
            "description": "Foreign ID / Alias of CS CIS Number (Person)",
            "nullable": true,
            "title": "cis_number",
            "type": "string",
            "x-nullable": true
          },
          "client_type_commercial": {
            "description": "Person's Client Type Commercial",
            "enum": ["A", "B", "C", "other"],
            "title": "client_type_commercial",
            "type": "string"
          },
          "client_type_consumer": {
            "description": "Person's Client Type Consumer",
            "enum": ["A", "B", "C", "other"],
            "title": "client_type_consumer",
            "type": "string"
          },
          "consent_email": {
            "description": "Person marketing consent for email",
            "nullable": true,
            "title": "consent_email",
            "type": "string",
            "x-nullable": true
          },
          "consent_mobile": {
            "description": "Person marketing consent for mobile",
            "nullable": true,
            "title": "consent_mobile",
            "type": "string",
            "x-nullable": true
          },
          "crc": {
            "description": "Person Credit Risk Code or Rating",
            "nullable": true,
            "title": "crc",
            "type": "string",
            "x-nullable": true
          },
          "created_by": {
            "description": "User name/email of the user who inserted the record via API",
            "readOnly": true,
            "title": "created_by",
            "type": "string"
          },
          "created_on": {
            "description": "Timestamp on which the record was created, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "created_on",
            "type": "string"
          },
          "cs_assets": {
            "description": "Person assets held with CS",
            "format": "float",
            "nullable": true,
            "title": "cs_assets",
            "type": "number",
            "x-nullable": true
          },
          "cs_assets_since": {
            "description": "Person change date for assets held with CS",
            "format": "date",
            "nullable": true,
            "title": "cs_assets_since",
            "type": "string",
            "x-nullable": true
          },
          "date_of_birth": {
            "description": "Person Date of Birth",
            "format": "date",
            "title": "date_of_birth",
            "type": "string"
          },
          "department": {
            "description": "Person departmental / organizational link within employer",
            "nullable": true,
            "title": "department",
            "type": "string",
            "x-nullable": true
          },
          "ebak_date": {
            "description": "Person ebAk Date",
            "format": "date",
            "nullable": true,
            "title": "ebak_date",
            "type": "string",
            "x-nullable": true
          },
          "ebak_type": {
            "description": "Person ebAk Type",
            "nullable": true,
            "title": "ebak_type",
            "type": "string",
            "x-nullable": true
          },
          "email": {
            "description": "Person email address",
            "nullable": true,
            "title": "email",
            "type": "string",
            "x-nullable": true
          },
          "employed_since": {
            "description": "Person employed since Date",
            "format": "date",
            "nullable": true,
            "title": "employed_since",
            "type": "string",
            "x-nullable": true
          },
          "employer": {
            "description": "Person Employer Name",
            "nullable": true,
            "title": "employer",
            "type": "string",
            "x-nullable": true
          },
          "employment_type": {
            "description": "Person Employment Type => possibly enum",
            "nullable": true,
            "title": "employment_type",
            "type": "string",
            "x-nullable": true
          },
          "first_name": {
            "description": "Person First Name",
            "title": "first_name",
            "type": "string"
          },
          "gender": {
            "description": "Person Gender",
            "enum": ["female", "male"],
            "title": "gender",
            "type": "string"
          },
          "id": {
            "description": "to be documented",
            "readOnly": true,
            "title": "id",
            "type": "integer"
          },
          "id_document_number": {
            "description": "to be documented",
            "nullable": true,
            "title": "id_document_number",
            "type": "string",
            "x-nullable": true
          },
          "id_document_type": {
            "description": "to be documented",
            "nullable": true,
            "title": "id_document_type",
            "type": "string",
            "x-nullable": true
          },
          "income_change_date": {
            "description": "Person income change date",
            "format": "date",
            "nullable": true,
            "title": "income_change_date",
            "type": "string",
            "x-nullable": true
          },
          "income_gross_annual": {
            "description": "Person gross annual income",
            "format": "float",
            "nullable": true,
            "title": "income_gross_annual",
            "type": "number",
            "x-nullable": true
          },
          "language": {
            "description": "Default communications language for Person",
            "enum": ["german", "english", "french"],
            "title": "language",
            "type": "string"
          },
          "last_name": {
            "description": "Person Last Name",
            "title": "last_name",
            "type": "string"
          },
          "marital_status": {
            "description": "Person Marital Status",
            "enum": ["single", "married", "divorced", "seperated", "widowed"],
            "title": "marital_status",
            "type": "string"
          },
          "nationalities": { "items": { "type": "string" }, "type": "array" },
          "occupation": {
            "description": "Person occupational description",
            "nullable": true,
            "title": "occupation",
            "type": "string",
            "x-nullable": true
          },
          "permit_since": {
            "description": "Person Date Permit received first time",
            "format": "date",
            "title": "permit_since",
            "type": "string"
          },
          "permit_type": {
            "description": "Person Permit Type",
            "enum": ["None", "Type C", "Type G", "Type S", "other"],
            "title": "permit_type",
            "type": "string"
          },
          "person_document_url": { "readOnly": true, "type": "string" },
          "phone_business": {
            "description": "Person business phone number",
            "nullable": true,
            "title": "phone_business",
            "type": "string",
            "x-nullable": true
          },
          "phone_business_mobile": {
            "description": "Person business mobile phone number",
            "nullable": true,
            "title": "phone_business_mobile",
            "type": "string",
            "x-nullable": true
          },
          "phone_mobile": {
            "description": "Person mobile phone number",
            "nullable": true,
            "title": "phone_mobile",
            "type": "string",
            "x-nullable": true
          },
          "phone_private": {
            "description": "Person private phone number",
            "nullable": true,
            "title": "phone_private",
            "type": "string",
            "x-nullable": true
          },
          "reference_ch_iban": {
            "description": "Person CH Reference Bank Account Number (IBAN)",
            "nullable": true,
            "title": "reference_ch_iban",
            "type": "string",
            "x-nullable": true
          },
          "salutation": {
            "description": "Person Salutation",
            "title": "salutation",
            "type": "string"
          },
          "status": {
            "description": "Current Status of Person",
            "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
            "title": "status",
            "type": "string"
          },
          "swisscard_employee": {
            "description": "Person's Swcrd Employee Type / Status",
            "enum": ["Regular", "Executive", "Board", "other"],
            "title": "swisscard_employee",
            "type": "string"
          },
          "tags": { "items": { "type": "integer" }, "type": "array" },
          "third_party_assets": {
            "description": "Person assets held with other banks",
            "format": "float",
            "nullable": true,
            "title": "third_party_assets",
            "type": "number",
            "x-nullable": true
          },
          "third_party_assets_since": {
            "description": "Person change date for assets held at other banks",
            "format": "date",
            "nullable": true,
            "title": "third_party_assets_since",
            "type": "string",
            "x-nullable": true
          },
          "title": {
            "description": "Person Title",
            "title": "title",
            "type": "string"
          }
        },
        "required": [
          "ch_residency_since",
          "client_type_commercial",
          "client_type_consumer",
          "date_of_birth",
          "first_name",
          "gender",
          "language",
          "last_name",
          "marital_status",
          "permit_since",
          "permit_type",
          "salutation",
          "status",
          "swisscard_employee",
          "title"
        ],
        "type": "object"
      },
      "person_addresses": {
        "example": {
          "address_type": "company address",
          "city": "city",
          "country_iso3": "country_iso3",
          "country_name": "country_name",
          "line1": "line1",
          "line2": "line2",
          "line3": "line3",
          "state": "state",
          "zip_code": "zip_code"
        },
        "properties": {
          "address_type": {
            "enum": [
              "company address",
              "private address",
              "mailing address",
              "temporary address",
              "one time address"
            ],
            "type": "string",
            "x-nullable": true
          },
          "city": { "type": "string", "x-nullable": true },
          "country_iso3": { "type": "string", "x-nullable": true },
          "country_name": { "type": "string", "x-nullable": true },
          "line1": { "type": "string", "x-nullable": true },
          "line2": { "type": "string", "x-nullable": true },
          "line3": { "type": "string", "x-nullable": true },
          "state": { "type": "string", "x-nullable": true },
          "zip_code": { "type": "string", "x-nullable": true }
        },
        "type": "object"
      },
      "person_role": {
        "example": {
          "changed_by": "changed_by",
          "changed_on": "2000-01-23T04:56:07+00:00",
          "created_by": "created_by",
          "created_on": "2000-01-23T04:56:07+00:00",
          "id": 0,
          "matching_status": "matching_status",
          "person_id": 6,
          "role": "Commercial Card Holder",
          "taggable_entity_id": 1
        },
        "properties": {
          "changed_by": {
            "description": "User name/email of the user who last changed the record via API",
            "readOnly": true,
            "title": "changed_by",
            "type": "string"
          },
          "changed_on": {
            "description": "Timestamp on which the record was last changed, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "changed_on",
            "type": "string"
          },
          "created_by": {
            "description": "User name/email of the user who inserted the record via API",
            "readOnly": true,
            "title": "created_by",
            "type": "string"
          },
          "created_on": {
            "description": "Timestamp on which the record was created, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "created_on",
            "type": "string"
          },
          "id": {
            "description": "Obj Id for the person role",
            "readOnly": true,
            "title": "id",
            "type": "integer"
          },
          "matching_status": {
            "description": "to be documented",
            "nullable": true,
            "title": "matching_status",
            "type": "string",
            "x-nullable": true
          },
          "person_id": {
            "description": "to be documented",
            "title": "person_id",
            "type": "integer"
          },
          "role": {
            "description": "to be documented",
            "enum": [
              "Commercial Card Holder",
              "Beneficial Owner",
              "Company Owner",
              "Trustee",
              "Settlor",
              "Grantor",
              "Founder",
              "Beneficiary",
              "Power of Attorney",
              "Authorised Signatory",
              "Purchasing Account",
              "others"
            ],
            "title": "role",
            "type": "string"
          },
          "taggable_entity_id": {
            "description": "to be documented",
            "title": "taggable_entity_id",
            "type": "integer"
          }
        },
        "required": ["person_id", "role", "taggable_entity_id"],
        "type": "object"
      },
      "tag": {
        "example": {
          "changed_by": "changed_by",
          "changed_on": "2000-01-23T04:56:07+00:00",
          "created_by": "created_by",
          "created_on": "2000-01-23T04:56:07+00:00",
          "description": "description",
          "id": 0,
          "tagged_entities": [6, 6]
        },
        "properties": {
          "changed_by": {
            "description": "User name/email of the user who last changed the record via API",
            "readOnly": true,
            "title": "changed_by",
            "type": "string"
          },
          "changed_on": {
            "description": "Timestamp on which the record was last changed, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "changed_on",
            "type": "string"
          },
          "created_by": {
            "description": "User name/email of the user who inserted the record via API",
            "readOnly": true,
            "title": "created_by",
            "type": "string"
          },
          "created_on": {
            "description": "Timestamp on which the record was created, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "created_on",
            "type": "string"
          },
          "description": {
            "description": "to be documented",
            "nullable": true,
            "title": "description",
            "type": "string",
            "x-nullable": true
          },
          "id": {
            "description": "to be documented",
            "readOnly": true,
            "title": "id",
            "type": "integer"
          },
          "tagged_entities": { "items": { "type": "integer" }, "type": "array" }
        },
        "type": "object"
      },
      "user": {
        "example": {
          "changed_by": "changed_by",
          "changed_on": "2000-01-23T04:56:07+00:00",
          "created_by": "created_by",
          "created_on": "2000-01-23T04:56:07+00:00",
          "email": "email",
          "id": 0,
          "name": "name",
          "notification_frequency": "daily",
          "organizations": [6, 6],
          "username": "username"
        },
        "properties": {
          "changed_by": {
            "description": "User name/email of the user who last changed the record via API",
            "readOnly": true,
            "title": "changed_by",
            "type": "string"
          },
          "changed_on": {
            "description": "Timestamp on which the record was last changed, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "changed_on",
            "type": "string"
          },
          "created_by": {
            "description": "User name/email of the user who inserted the record via API",
            "readOnly": true,
            "title": "created_by",
            "type": "string"
          },
          "created_on": {
            "description": "Timestamp on which the record was created, automatically filled by the API",
            "format": "date-time",
            "readOnly": true,
            "title": "created_on",
            "type": "string"
          },
          "email": {
            "description": "Email of user",
            "title": "email",
            "type": "string"
          },
          "id": {
            "description": "ID of user",
            "readOnly": true,
            "title": "id",
            "type": "integer"
          },
          "name": {
            "description": "Name of user",
            "title": "name",
            "type": "string"
          },
          "notification_frequency": {
            "description": "How often does user want to be notified of tasks",
            "enum": ["daily", "every other day", "weekly", "monthly"],
            "title": "notification_frequency",
            "type": "string"
          },
          "organizations": { "items": { "type": "integer" }, "type": "array" },
          "username": {
            "description": "Account name of user for loging this app",
            "title": "username",
            "type": "string"
          }
        },
        "required": ["email", "name", "notification_frequency", "username"],
        "type": "object"
      }
    },
    "securitySchemes": {
      "sso_auth": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-apikeyInfoFunc": "swagger_server.controllers.authorization_controller.check_sso_auth"
      }
    }
  },
  "info": {
    "contact": {
      "email": "info@thecompany.com",
      "name": "TheCompany",
      "url": "http://thecompany.com/"
    },
    "description": "API definition for metal.ai Swcrd CDH Platform",
    "title": "metal.ai Swcrd CDH Platform",
    "version": "0.0.1"
  },
  "openapi": "3.0.1",
  "paths": {
    "/basic_account": {
      "get": {
        "description": "Get all basic_account IDs and names",
        "operationId": "get_basic_accounts",
        "parameters": [
          {
            "description": "Offset for start of  returned records",
            "explode": true,
            "in": "query",
            "name": "OFFSET",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Limit the amount of returned records",
            "explode": true,
            "in": "query",
            "name": "LIMIT",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Column used for sorting. The format is [+|-]<column_name>",
            "explode": true,
            "in": "query",
            "name": "ORDER_BY",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Specifies the fields to be returned. Default: Empty List, in which case __repr__ is returned as name>",
            "explode": true,
            "in": "query",
            "name": "LIST_FIELDS",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "id",
                  "cis_number",
                  "cis_open_date",
                  "master_account_id",
                  "company_name",
                  "addresses",
                  "legal_form",
                  "noga_code",
                  "noga_description",
                  "stock_exchange",
                  "main_stock_exchange",
                  "stock_exchange_code",
                  "share_capital",
                  "parent",
                  "foundation_date",
                  "hr_registration_number",
                  "hr_registration_date",
                  "operational_activity",
                  "bank_name",
                  "bank_iban",
                  "payment_type",
                  "private_expenses_allowed",
                  "product",
                  "billing_bank_account",
                  "dd_enabled",
                  "last_payment_amount",
                  "max_bca_limit",
                  "compliance_risk_score",
                  "status"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where id == input",
            "explode": true,
            "in": "query",
            "name": "equal_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where id != input",
            "explode": true,
            "in": "query",
            "name": "not_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where id in input",
            "explode": true,
            "in": "query",
            "name": "in_list_id",
            "required": false,
            "schema": { "items": { "type": "integer" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where id >= input",
            "explode": true,
            "in": "query",
            "name": "gte_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where id <= input",
            "explode": true,
            "in": "query",
            "name": "lte_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where cis_number like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "cis_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where cis_number notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_cis_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where cis_number ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_cis_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where cis_number notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_cis_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where cis_number isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_cis_number",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where cis_open_date >= input",
            "explode": true,
            "in": "query",
            "name": "gte_cis_open_date",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where cis_open_date <= input",
            "explode": true,
            "in": "query",
            "name": "lte_cis_open_date",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where cis_open_date isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_cis_open_date",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where master_account_id == input",
            "explode": true,
            "in": "query",
            "name": "equal_master_account_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where master_account_id != input",
            "explode": true,
            "in": "query",
            "name": "not_master_account_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where master_account_id in input",
            "explode": true,
            "in": "query",
            "name": "in_list_master_account_id",
            "required": false,
            "schema": { "items": { "type": "integer" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where master_account_id >= input",
            "explode": true,
            "in": "query",
            "name": "gte_master_account_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where master_account_id <= input",
            "explode": true,
            "in": "query",
            "name": "lte_master_account_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where company_name like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "company_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where company_name notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_company_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where company_name ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_company_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where company_name notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_company_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where addresses isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_addresses",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where legal_form == input",
            "explode": true,
            "in": "query",
            "name": "equal_legal_form",
            "required": false,
            "schema": {
              "enum": ["Limited", "Listed", "Single Owner"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where legal_form != input",
            "explode": true,
            "in": "query",
            "name": "not_legal_form",
            "required": false,
            "schema": {
              "enum": ["Limited", "Listed", "Single Owner"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where legal_form in input",
            "explode": true,
            "in": "query",
            "name": "in_list_legal_form",
            "required": false,
            "schema": {
              "items": {
                "enum": ["Limited", "Listed", "Single Owner"],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where noga_code like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "noga_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where noga_code notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_noga_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where noga_code ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_noga_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where noga_code notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_noga_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where noga_description like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "noga_description",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where noga_description notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_noga_description",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where noga_description ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_noga_description",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where noga_description notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_noga_description",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where stock_exchange like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "stock_exchange",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where stock_exchange notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_stock_exchange",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where stock_exchange ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_stock_exchange",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where stock_exchange notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_stock_exchange",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where main_stock_exchange like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "main_stock_exchange",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where main_stock_exchange notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_main_stock_exchange",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where main_stock_exchange ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_main_stock_exchange",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where main_stock_exchange notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_main_stock_exchange",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where stock_exchange_code like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "stock_exchange_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where stock_exchange_code notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_stock_exchange_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where stock_exchange_code ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_stock_exchange_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where stock_exchange_code notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_stock_exchange_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where stock_exchange_code isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_stock_exchange_code",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where share_capital >= input",
            "explode": true,
            "in": "query",
            "name": "gte_share_capital",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where share_capital <= input",
            "explode": true,
            "in": "query",
            "name": "lte_share_capital",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where share_capital isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_share_capital",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where parent == input",
            "explode": true,
            "in": "query",
            "name": "equal_parent",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where parent != input",
            "explode": true,
            "in": "query",
            "name": "not_parent",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where parent in input",
            "explode": true,
            "in": "query",
            "name": "in_list_parent",
            "required": false,
            "schema": { "items": { "type": "integer" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where parent >= input",
            "explode": true,
            "in": "query",
            "name": "gte_parent",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where parent <= input",
            "explode": true,
            "in": "query",
            "name": "lte_parent",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where foundation_date >= input",
            "explode": true,
            "in": "query",
            "name": "gte_foundation_date",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where foundation_date <= input",
            "explode": true,
            "in": "query",
            "name": "lte_foundation_date",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where hr_registration_number like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "hr_registration_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where hr_registration_number notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_hr_registration_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where hr_registration_number ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_hr_registration_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where hr_registration_number notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_hr_registration_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where hr_registration_number isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_hr_registration_number",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where hr_registration_date >= input",
            "explode": true,
            "in": "query",
            "name": "gte_hr_registration_date",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where hr_registration_date <= input",
            "explode": true,
            "in": "query",
            "name": "lte_hr_registration_date",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where hr_registration_date isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_hr_registration_date",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where operational_activity like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "operational_activity",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where operational_activity notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_operational_activity",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where operational_activity ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_operational_activity",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where operational_activity notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_operational_activity",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where operational_activity isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_operational_activity",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where bank_name like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "bank_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where bank_name notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_bank_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where bank_name ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_bank_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where bank_name notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_bank_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where bank_name isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_bank_name",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where bank_iban like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "bank_iban",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where bank_iban notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_bank_iban",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where bank_iban ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_bank_iban",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where bank_iban notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_bank_iban",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where bank_iban isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_bank_iban",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where payment_type == input",
            "explode": true,
            "in": "query",
            "name": "equal_payment_type",
            "required": false,
            "schema": { "enum": ["CBCP", "CBDP", "DBDP"], "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where payment_type != input",
            "explode": true,
            "in": "query",
            "name": "not_payment_type",
            "required": false,
            "schema": { "enum": ["CBCP", "CBDP", "DBDP"], "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where payment_type in input",
            "explode": true,
            "in": "query",
            "name": "in_list_payment_type",
            "required": false,
            "schema": {
              "items": { "enum": ["CBCP", "CBDP", "DBDP"], "type": "string" },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where private_expenses_allowed == input",
            "explode": true,
            "in": "query",
            "name": "equal_private_expenses_allowed",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where private_expenses_allowed != input",
            "explode": true,
            "in": "query",
            "name": "not_private_expenses_allowed",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where private_expenses_allowed isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_private_expenses_allowed",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where product == input",
            "explode": true,
            "in": "query",
            "name": "equal_product",
            "required": false,
            "schema": {
              "enum": ["Corporate", "Purchasing", "Meeting", "BTA", "VPayment"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where product != input",
            "explode": true,
            "in": "query",
            "name": "not_product",
            "required": false,
            "schema": {
              "enum": ["Corporate", "Purchasing", "Meeting", "BTA", "VPayment"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where product in input",
            "explode": true,
            "in": "query",
            "name": "in_list_product",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "Corporate",
                  "Purchasing",
                  "Meeting",
                  "BTA",
                  "VPayment"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where billing_bank_account like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "billing_bank_account",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where billing_bank_account notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_billing_bank_account",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where billing_bank_account ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_billing_bank_account",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where billing_bank_account notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_billing_bank_account",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where dd_enabled == input",
            "explode": true,
            "in": "query",
            "name": "equal_dd_enabled",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where dd_enabled != input",
            "explode": true,
            "in": "query",
            "name": "not_dd_enabled",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where dd_enabled isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_dd_enabled",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where last_payment_amount >= input",
            "explode": true,
            "in": "query",
            "name": "gte_last_payment_amount",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where last_payment_amount <= input",
            "explode": true,
            "in": "query",
            "name": "lte_last_payment_amount",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where last_payment_amount isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_last_payment_amount",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where max_bca_limit >= input",
            "explode": true,
            "in": "query",
            "name": "gte_max_bca_limit",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where max_bca_limit <= input",
            "explode": true,
            "in": "query",
            "name": "lte_max_bca_limit",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where max_bca_limit isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_max_bca_limit",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where compliance_risk_score like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "compliance_risk_score",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where compliance_risk_score notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_compliance_risk_score",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where compliance_risk_score ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_compliance_risk_score",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where compliance_risk_score notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_compliance_risk_score",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where compliance_risk_score isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_compliance_risk_score",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where status == input",
            "explode": true,
            "in": "query",
            "name": "equal_status",
            "required": false,
            "schema": {
              "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where status != input",
            "explode": true,
            "in": "query",
            "name": "not_status",
            "required": false,
            "schema": {
              "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for basic_accounts, where status in input",
            "explode": true,
            "in": "query",
            "name": "in_list_status",
            "required": false,
            "schema": {
              "items": {
                "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Structure returned when invoking GET all 200",
                    "title": "all_objects",
                    "type": "object"
                  },
                  "type": "array",
                  "x-content-type": "application/json"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified basic_account ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An basic_account with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get all basic_account IDs",
        "tags": ["basic_account"],
        "x-openapi-router-controller": "swagger_server.controllers.basic_account_controller"
      },
      "post": {
        "description": "Create a new basic_account with new id and provided data",
        "operationId": "create_basic_account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/basic_account" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/New basic_account" }
              }
            },
            "description": "basic_account created"
          },
          "400": {
            "description": "The specified basic_account ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An basic_account with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Create a new basic_account",
        "tags": ["basic_account"],
        "x-openapi-router-controller": "swagger_server.controllers.basic_account_controller"
      }
    },
    "/basic_account/{oid}": {
      "get": {
        "description": "Get a basic_account by ID",
        "operationId": "get_basic_account_by_id",
        "parameters": [
          {
            "description": "basic_account ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "integer" },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/basic_account" }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified basic_account ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An basic_account with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get a basic_account by ID",
        "tags": ["basic_account"],
        "x-openapi-router-controller": "swagger_server.controllers.basic_account_controller"
      },
      "put": {
        "description": "Update the basic_account with the provided data",
        "operationId": "update_basic_account_by_id",
        "parameters": [
          {
            "description": "basic_account ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "integer" },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/basic_account" }
            }
          },
          "required": true
        },
        "responses": {
          "201": { "description": "basic_account updated" },
          "400": {
            "description": "The specified basic_account ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An basic_account with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Update the basic_account",
        "tags": ["basic_account"],
        "x-openapi-router-controller": "swagger_server.controllers.basic_account_controller"
      }
    },
    "/card": {
      "get": {
        "description": "Get all card IDs and names",
        "operationId": "get_cards",
        "parameters": [
          {
            "description": "Offset for start of  returned records",
            "explode": true,
            "in": "query",
            "name": "OFFSET",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Limit the amount of returned records",
            "explode": true,
            "in": "query",
            "name": "LIMIT",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Column used for sorting. The format is [+|-]<column_name>",
            "explode": true,
            "in": "query",
            "name": "ORDER_BY",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Specifies the fields to be returned. Default: Empty List, in which case __repr__ is returned as name>",
            "explode": true,
            "in": "query",
            "name": "LIST_FIELDS",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "id",
                  "basic_account_id",
                  "master_account_id",
                  "card_number",
                  "card_status",
                  "card_type",
                  "card_type_translated",
                  "card_valid_from",
                  "card_valid_until",
                  "embosser_name",
                  "card_limit",
                  "product_id",
                  "bundle_code",
                  "bundle_number",
                  "cancel_reason_code",
                  "card_close_date",
                  "fee_type",
                  "last_fee_code",
                  "last_fee_date",
                  "next_fee_date",
                  "renewal_code",
                  "renewal_fee_amount",
                  "status"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for cards, where id == input",
            "explode": true,
            "in": "query",
            "name": "equal_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for cards, where id != input",
            "explode": true,
            "in": "query",
            "name": "not_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for cards, where id in input",
            "explode": true,
            "in": "query",
            "name": "in_list_id",
            "required": false,
            "schema": { "items": { "type": "integer" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Search for cards, where id >= input",
            "explode": true,
            "in": "query",
            "name": "gte_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for cards, where id <= input",
            "explode": true,
            "in": "query",
            "name": "lte_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for cards, where basic_account_id == input",
            "explode": true,
            "in": "query",
            "name": "equal_basic_account_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for cards, where basic_account_id != input",
            "explode": true,
            "in": "query",
            "name": "not_basic_account_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for cards, where basic_account_id in input",
            "explode": true,
            "in": "query",
            "name": "in_list_basic_account_id",
            "required": false,
            "schema": { "items": { "type": "integer" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Search for cards, where basic_account_id >= input",
            "explode": true,
            "in": "query",
            "name": "gte_basic_account_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for cards, where basic_account_id <= input",
            "explode": true,
            "in": "query",
            "name": "lte_basic_account_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for cards, where master_account_id == input",
            "explode": true,
            "in": "query",
            "name": "equal_master_account_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for cards, where master_account_id != input",
            "explode": true,
            "in": "query",
            "name": "not_master_account_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for cards, where master_account_id in input",
            "explode": true,
            "in": "query",
            "name": "in_list_master_account_id",
            "required": false,
            "schema": { "items": { "type": "integer" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Search for cards, where master_account_id >= input",
            "explode": true,
            "in": "query",
            "name": "gte_master_account_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for cards, where master_account_id <= input",
            "explode": true,
            "in": "query",
            "name": "lte_master_account_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_number like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "card_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_number notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_card_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_number ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_card_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_number notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_card_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_number isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_card_number",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_status == input",
            "explode": true,
            "in": "query",
            "name": "equal_card_status",
            "required": false,
            "schema": {
              "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_status != input",
            "explode": true,
            "in": "query",
            "name": "not_card_status",
            "required": false,
            "schema": {
              "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_status in input",
            "explode": true,
            "in": "query",
            "name": "in_list_card_status",
            "required": false,
            "schema": {
              "items": {
                "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_type like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "card_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_type notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_card_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_type ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_card_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_type notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_card_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_type_translated like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "card_type_translated",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_type_translated notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_card_type_translated",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_type_translated ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_card_type_translated",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_type_translated notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_card_type_translated",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_valid_from >= input",
            "explode": true,
            "in": "query",
            "name": "gte_card_valid_from",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_valid_from <= input",
            "explode": true,
            "in": "query",
            "name": "lte_card_valid_from",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_valid_from isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_card_valid_from",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_valid_until >= input",
            "explode": true,
            "in": "query",
            "name": "gte_card_valid_until",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_valid_until <= input",
            "explode": true,
            "in": "query",
            "name": "lte_card_valid_until",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_valid_until isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_card_valid_until",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for cards, where embosser_name like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "embosser_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where embosser_name notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_embosser_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where embosser_name ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_embosser_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where embosser_name notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_embosser_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_limit >= input",
            "explode": true,
            "in": "query",
            "name": "gte_card_limit",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_limit <= input",
            "explode": true,
            "in": "query",
            "name": "lte_card_limit",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_limit isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_card_limit",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for cards, where product_id like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "product_id",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where product_id notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_product_id",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where product_id ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_product_id",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where product_id notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_product_id",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where bundle_code like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "bundle_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where bundle_code notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_bundle_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where bundle_code ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_bundle_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where bundle_code notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_bundle_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where bundle_number >= input",
            "explode": true,
            "in": "query",
            "name": "gte_bundle_number",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for cards, where bundle_number <= input",
            "explode": true,
            "in": "query",
            "name": "lte_bundle_number",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for cards, where cancel_reason_code like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "cancel_reason_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where cancel_reason_code notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_cancel_reason_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where cancel_reason_code ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_cancel_reason_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where cancel_reason_code notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_cancel_reason_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_close_date >= input",
            "explode": true,
            "in": "query",
            "name": "gte_card_close_date",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_close_date <= input",
            "explode": true,
            "in": "query",
            "name": "lte_card_close_date",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where card_close_date isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_card_close_date",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for cards, where fee_type like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "fee_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where fee_type notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_fee_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where fee_type ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_fee_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where fee_type notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_fee_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where last_fee_code like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "last_fee_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where last_fee_code notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_last_fee_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where last_fee_code ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_last_fee_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where last_fee_code notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_last_fee_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where last_fee_date >= input",
            "explode": true,
            "in": "query",
            "name": "gte_last_fee_date",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where last_fee_date <= input",
            "explode": true,
            "in": "query",
            "name": "lte_last_fee_date",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where last_fee_date isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_last_fee_date",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for cards, where next_fee_date >= input",
            "explode": true,
            "in": "query",
            "name": "gte_next_fee_date",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where next_fee_date <= input",
            "explode": true,
            "in": "query",
            "name": "lte_next_fee_date",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where next_fee_date isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_next_fee_date",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for cards, where renewal_code like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "renewal_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where renewal_code notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_renewal_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where renewal_code ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_renewal_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where renewal_code notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_renewal_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for cards, where renewal_fee_amount >= input",
            "explode": true,
            "in": "query",
            "name": "gte_renewal_fee_amount",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for cards, where renewal_fee_amount <= input",
            "explode": true,
            "in": "query",
            "name": "lte_renewal_fee_amount",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for cards, where renewal_fee_amount isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_renewal_fee_amount",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for cards, where status == input",
            "explode": true,
            "in": "query",
            "name": "equal_status",
            "required": false,
            "schema": {
              "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for cards, where status != input",
            "explode": true,
            "in": "query",
            "name": "not_status",
            "required": false,
            "schema": {
              "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for cards, where status in input",
            "explode": true,
            "in": "query",
            "name": "in_list_status",
            "required": false,
            "schema": {
              "items": {
                "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Structure returned when invoking GET all 200",
                    "title": "all_objects",
                    "type": "object"
                  },
                  "type": "array",
                  "x-content-type": "application/json"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified card ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An card with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get all card IDs",
        "tags": ["card"],
        "x-openapi-router-controller": "swagger_server.controllers.card_controller"
      },
      "post": {
        "description": "Create a new card with new id and provided data",
        "operationId": "create_card",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/card" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/New card" }
              }
            },
            "description": "card created"
          },
          "400": {
            "description": "The specified card ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An card with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Create a new card",
        "tags": ["card"],
        "x-openapi-router-controller": "swagger_server.controllers.card_controller"
      }
    },
    "/card/{oid}": {
      "get": {
        "description": "Get a card by ID",
        "operationId": "get_card_by_id",
        "parameters": [
          {
            "description": "card ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "integer" },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/card" }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified card ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An card with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get a card by ID",
        "tags": ["card"],
        "x-openapi-router-controller": "swagger_server.controllers.card_controller"
      },
      "put": {
        "description": "Update the card with the provided data",
        "operationId": "update_card_by_id",
        "parameters": [
          {
            "description": "card ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "integer" },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/card" }
            }
          },
          "required": true
        },
        "responses": {
          "201": { "description": "card updated" },
          "400": {
            "description": "The specified card ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An card with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Update the card",
        "tags": ["card"],
        "x-openapi-router-controller": "swagger_server.controllers.card_controller"
      }
    },
    "/country": {
      "get": {
        "description": "Get all country IDs and names",
        "operationId": "get_countrys",
        "parameters": [
          {
            "description": "Offset for start of  returned records",
            "explode": true,
            "in": "query",
            "name": "OFFSET",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Limit the amount of returned records",
            "explode": true,
            "in": "query",
            "name": "LIMIT",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Column used for sorting. The format is [+|-]<column_name>",
            "explode": true,
            "in": "query",
            "name": "ORDER_BY",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Specifies the fields to be returned. Default: Empty List, in which case __repr__ is returned as name>",
            "explode": true,
            "in": "query",
            "name": "LIST_FIELDS",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "created_on",
                  "changed_on",
                  "created_by",
                  "changed_by",
                  "id",
                  "country_iso",
                  "name_short",
                  "name_long",
                  "eu_member",
                  "sepa_member",
                  "un_member",
                  "high_risk_country_flag",
                  "valid_from"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for countrys, where created_on >= input",
            "explode": true,
            "in": "query",
            "name": "gte_created_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where created_on <= input",
            "explode": true,
            "in": "query",
            "name": "lte_created_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where changed_on >= input",
            "explode": true,
            "in": "query",
            "name": "gte_changed_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where changed_on <= input",
            "explode": true,
            "in": "query",
            "name": "lte_changed_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where created_by like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where created_by notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where created_by ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where created_by notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where changed_by like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where changed_by notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where changed_by ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where changed_by notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where id == input",
            "explode": true,
            "in": "query",
            "name": "equal_id",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where id != input",
            "explode": true,
            "in": "query",
            "name": "not_id",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where id in input",
            "explode": true,
            "in": "query",
            "name": "in_list_id",
            "required": false,
            "schema": { "items": { "type": "string" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where country_iso like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "country_iso",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where country_iso notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_country_iso",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where country_iso ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_country_iso",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where country_iso notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_country_iso",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where country_iso isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_country_iso",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where name_short like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "name_short",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where name_short notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_name_short",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where name_short ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_name_short",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where name_short notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_name_short",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where name_short isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_name_short",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where name_long like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "name_long",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where name_long notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_name_long",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where name_long ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_name_long",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where name_long notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_name_long",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where name_long isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_name_long",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where eu_member == input",
            "explode": true,
            "in": "query",
            "name": "equal_eu_member",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where eu_member != input",
            "explode": true,
            "in": "query",
            "name": "not_eu_member",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where eu_member isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_eu_member",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where sepa_member == input",
            "explode": true,
            "in": "query",
            "name": "equal_sepa_member",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where sepa_member != input",
            "explode": true,
            "in": "query",
            "name": "not_sepa_member",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where sepa_member isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_sepa_member",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where un_member == input",
            "explode": true,
            "in": "query",
            "name": "equal_un_member",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where un_member != input",
            "explode": true,
            "in": "query",
            "name": "not_un_member",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where un_member isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_un_member",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where high_risk_country_flag == input",
            "explode": true,
            "in": "query",
            "name": "equal_high_risk_country_flag",
            "required": false,
            "schema": {
              "enum": ["standard risk", "high risk", "prohibited"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for countrys, where high_risk_country_flag != input",
            "explode": true,
            "in": "query",
            "name": "not_high_risk_country_flag",
            "required": false,
            "schema": {
              "enum": ["standard risk", "high risk", "prohibited"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for countrys, where high_risk_country_flag in input",
            "explode": true,
            "in": "query",
            "name": "in_list_high_risk_country_flag",
            "required": false,
            "schema": {
              "items": {
                "enum": ["standard risk", "high risk", "prohibited"],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for countrys, where high_risk_country_flag isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_high_risk_country_flag",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where valid_from >= input",
            "explode": true,
            "in": "query",
            "name": "gte_valid_from",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where valid_from <= input",
            "explode": true,
            "in": "query",
            "name": "lte_valid_from",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for countrys, where valid_from isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_valid_from",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Structure returned when invoking GET all 200",
                    "title": "all_objects",
                    "type": "object"
                  },
                  "type": "array",
                  "x-content-type": "application/json"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified country ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An country with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get all country IDs",
        "tags": ["country"],
        "x-openapi-router-controller": "swagger_server.controllers.country_controller"
      },
      "post": {
        "description": "Create a new country with new id and provided data",
        "operationId": "create_country",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/country" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/New country" }
              }
            },
            "description": "country created"
          },
          "400": {
            "description": "The specified country ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An country with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Create a new country",
        "tags": ["country"],
        "x-openapi-router-controller": "swagger_server.controllers.country_controller"
      }
    },
    "/country/{oid}": {
      "get": {
        "description": "Get a country by ID",
        "operationId": "get_country_by_id",
        "parameters": [
          {
            "description": "country ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "string" },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/country" }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified country ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An country with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get a country by ID",
        "tags": ["country"],
        "x-openapi-router-controller": "swagger_server.controllers.country_controller"
      },
      "put": {
        "description": "Update the country with the provided data",
        "operationId": "update_country_by_id",
        "parameters": [
          {
            "description": "country ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "string" },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/country" }
            }
          },
          "required": true
        },
        "responses": {
          "201": { "description": "country updated" },
          "400": {
            "description": "The specified country ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An country with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Update the country",
        "tags": ["country"],
        "x-openapi-router-controller": "swagger_server.controllers.country_controller"
      }
    },
    "/currency": {
      "get": {
        "description": "Get all currency IDs and names",
        "operationId": "get_currencys",
        "parameters": [
          {
            "description": "Offset for start of  returned records",
            "explode": true,
            "in": "query",
            "name": "OFFSET",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Limit the amount of returned records",
            "explode": true,
            "in": "query",
            "name": "LIMIT",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Column used for sorting. The format is [+|-]<column_name>",
            "explode": true,
            "in": "query",
            "name": "ORDER_BY",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Specifies the fields to be returned. Default: Empty List, in which case __repr__ is returned as name>",
            "explode": true,
            "in": "query",
            "name": "LIST_FIELDS",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "created_on",
                  "changed_on",
                  "created_by",
                  "changed_by",
                  "id",
                  "name",
                  "currency_type",
                  "factor",
                  "issuer_country_iso3",
                  "valid_from"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for currencys, where created_on >= input",
            "explode": true,
            "in": "query",
            "name": "gte_created_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where created_on <= input",
            "explode": true,
            "in": "query",
            "name": "lte_created_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where changed_on >= input",
            "explode": true,
            "in": "query",
            "name": "gte_changed_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where changed_on <= input",
            "explode": true,
            "in": "query",
            "name": "lte_changed_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where created_by like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where created_by notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where created_by ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where created_by notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where changed_by like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where changed_by notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where changed_by ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where changed_by notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where id == input",
            "explode": true,
            "in": "query",
            "name": "equal_id",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where id != input",
            "explode": true,
            "in": "query",
            "name": "not_id",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where id in input",
            "explode": true,
            "in": "query",
            "name": "in_list_id",
            "required": false,
            "schema": { "items": { "type": "string" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where name like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where name notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where name ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where name notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where name isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_name",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where currency_type == input",
            "explode": true,
            "in": "query",
            "name": "equal_currency_type",
            "required": false,
            "schema": {
              "enum": ["Fiat", "Precious Metal", "Crypto"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for currencys, where currency_type != input",
            "explode": true,
            "in": "query",
            "name": "not_currency_type",
            "required": false,
            "schema": {
              "enum": ["Fiat", "Precious Metal", "Crypto"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for currencys, where currency_type in input",
            "explode": true,
            "in": "query",
            "name": "in_list_currency_type",
            "required": false,
            "schema": {
              "items": {
                "enum": ["Fiat", "Precious Metal", "Crypto"],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for currencys, where currency_type isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_currency_type",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where factor >= input",
            "explode": true,
            "in": "query",
            "name": "gte_factor",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where factor <= input",
            "explode": true,
            "in": "query",
            "name": "lte_factor",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where factor isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_factor",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where issuer_country_iso3 == input",
            "explode": true,
            "in": "query",
            "name": "equal_issuer_country_iso3",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where issuer_country_iso3 != input",
            "explode": true,
            "in": "query",
            "name": "not_issuer_country_iso3",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where issuer_country_iso3 in input",
            "explode": true,
            "in": "query",
            "name": "in_list_issuer_country_iso3",
            "required": false,
            "schema": { "items": { "type": "string" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where issuer_country_iso3 isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_issuer_country_iso3",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where valid_from >= input",
            "explode": true,
            "in": "query",
            "name": "gte_valid_from",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where valid_from <= input",
            "explode": true,
            "in": "query",
            "name": "lte_valid_from",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for currencys, where valid_from isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_valid_from",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Structure returned when invoking GET all 200",
                    "title": "all_objects",
                    "type": "object"
                  },
                  "type": "array",
                  "x-content-type": "application/json"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified currency ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An currency with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get all currency IDs",
        "tags": ["currency"],
        "x-openapi-router-controller": "swagger_server.controllers.currency_controller"
      },
      "post": {
        "description": "Create a new currency with new id and provided data",
        "operationId": "create_currency",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/currency" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/New currency" }
              }
            },
            "description": "currency created"
          },
          "400": {
            "description": "The specified currency ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An currency with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Create a new currency",
        "tags": ["currency"],
        "x-openapi-router-controller": "swagger_server.controllers.currency_controller"
      }
    },
    "/currency/{oid}": {
      "get": {
        "description": "Get a currency by ID",
        "operationId": "get_currency_by_id",
        "parameters": [
          {
            "description": "currency ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "string" },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/currency" }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified currency ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An currency with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get a currency by ID",
        "tags": ["currency"],
        "x-openapi-router-controller": "swagger_server.controllers.currency_controller"
      },
      "put": {
        "description": "Update the currency with the provided data",
        "operationId": "update_currency_by_id",
        "parameters": [
          {
            "description": "currency ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "string" },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/currency" }
            }
          },
          "required": true
        },
        "responses": {
          "201": { "description": "currency updated" },
          "400": {
            "description": "The specified currency ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An currency with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Update the currency",
        "tags": ["currency"],
        "x-openapi-router-controller": "swagger_server.controllers.currency_controller"
      }
    },
    "/master_account": {
      "get": {
        "description": "Get all master_account IDs and names",
        "operationId": "get_master_accounts",
        "parameters": [
          {
            "description": "Offset for start of  returned records",
            "explode": true,
            "in": "query",
            "name": "OFFSET",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Limit the amount of returned records",
            "explode": true,
            "in": "query",
            "name": "LIMIT",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Column used for sorting. The format is [+|-]<column_name>",
            "explode": true,
            "in": "query",
            "name": "ORDER_BY",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Specifies the fields to be returned. Default: Empty List, in which case __repr__ is returned as name>",
            "explode": true,
            "in": "query",
            "name": "LIST_FIELDS",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "id",
                  "mc_number",
                  "company_name",
                  "noga_code",
                  "register_type",
                  "register_id",
                  "global_limit",
                  "compliance_risk_score",
                  "status"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where id == input",
            "explode": true,
            "in": "query",
            "name": "equal_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where id != input",
            "explode": true,
            "in": "query",
            "name": "not_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where id in input",
            "explode": true,
            "in": "query",
            "name": "in_list_id",
            "required": false,
            "schema": { "items": { "type": "integer" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where id >= input",
            "explode": true,
            "in": "query",
            "name": "gte_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where id <= input",
            "explode": true,
            "in": "query",
            "name": "lte_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where mc_number like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "mc_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where mc_number notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_mc_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where mc_number ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_mc_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where mc_number notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_mc_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where mc_number isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_mc_number",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where company_name like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "company_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where company_name notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_company_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where company_name ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_company_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where company_name notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_company_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where noga_code like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "noga_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where noga_code notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_noga_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where noga_code ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_noga_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where noga_code notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_noga_code",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where register_type like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "register_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where register_type notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_register_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where register_type ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_register_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where register_type notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_register_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where register_id like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "register_id",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where register_id notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_register_id",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where register_id ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_register_id",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where register_id notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_register_id",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where global_limit >= input",
            "explode": true,
            "in": "query",
            "name": "gte_global_limit",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where global_limit <= input",
            "explode": true,
            "in": "query",
            "name": "lte_global_limit",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where global_limit isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_global_limit",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where compliance_risk_score like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "compliance_risk_score",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where compliance_risk_score notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_compliance_risk_score",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where compliance_risk_score ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_compliance_risk_score",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where compliance_risk_score notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_compliance_risk_score",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where status == input",
            "explode": true,
            "in": "query",
            "name": "equal_status",
            "required": false,
            "schema": {
              "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where status != input",
            "explode": true,
            "in": "query",
            "name": "not_status",
            "required": false,
            "schema": {
              "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for master_accounts, where status in input",
            "explode": true,
            "in": "query",
            "name": "in_list_status",
            "required": false,
            "schema": {
              "items": {
                "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Structure returned when invoking GET all 200",
                    "title": "all_objects",
                    "type": "object"
                  },
                  "type": "array",
                  "x-content-type": "application/json"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified master_account ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An master_account with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get all master_account IDs",
        "tags": ["master_account"],
        "x-openapi-router-controller": "swagger_server.controllers.master_account_controller"
      },
      "post": {
        "description": "Create a new master_account with new id and provided data",
        "operationId": "create_master_account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/master_account" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/New master_account" }
              }
            },
            "description": "master_account created"
          },
          "400": {
            "description": "The specified master_account ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An master_account with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Create a new master_account",
        "tags": ["master_account"],
        "x-openapi-router-controller": "swagger_server.controllers.master_account_controller"
      }
    },
    "/master_account/{oid}": {
      "get": {
        "description": "Get a master_account by ID",
        "operationId": "get_master_account_by_id",
        "parameters": [
          {
            "description": "master_account ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "integer" },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/master_account" }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified master_account ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An master_account with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get a master_account by ID",
        "tags": ["master_account"],
        "x-openapi-router-controller": "swagger_server.controllers.master_account_controller"
      },
      "put": {
        "description": "Update the master_account with the provided data",
        "operationId": "update_master_account_by_id",
        "parameters": [
          {
            "description": "master_account ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "integer" },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/master_account" }
            }
          },
          "required": true
        },
        "responses": {
          "201": { "description": "master_account updated" },
          "400": {
            "description": "The specified master_account ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An master_account with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Update the master_account",
        "tags": ["master_account"],
        "x-openapi-router-controller": "swagger_server.controllers.master_account_controller"
      }
    },
    "/memo": {
      "get": {
        "description": "Get all memo IDs and names",
        "operationId": "get_memos",
        "parameters": [
          {
            "description": "Offset for start of  returned records",
            "explode": true,
            "in": "query",
            "name": "OFFSET",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Limit the amount of returned records",
            "explode": true,
            "in": "query",
            "name": "LIMIT",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Column used for sorting. The format is [+|-]<column_name>",
            "explode": true,
            "in": "query",
            "name": "ORDER_BY",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Specifies the fields to be returned. Default: Empty List, in which case __repr__ is returned as name>",
            "explode": true,
            "in": "query",
            "name": "LIST_FIELDS",
            "required": false,
            "schema": {
              "items": {
                "enum": ["id", "type", "subject", "desccription", "owner"],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for memos, where id == input",
            "explode": true,
            "in": "query",
            "name": "equal_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for memos, where id != input",
            "explode": true,
            "in": "query",
            "name": "not_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for memos, where id in input",
            "explode": true,
            "in": "query",
            "name": "in_list_id",
            "required": false,
            "schema": { "items": { "type": "integer" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Search for memos, where id >= input",
            "explode": true,
            "in": "query",
            "name": "gte_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for memos, where id <= input",
            "explode": true,
            "in": "query",
            "name": "lte_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for memos, where type == input",
            "explode": true,
            "in": "query",
            "name": "equal_type",
            "required": false,
            "schema": {
              "enum": [
                "Billing",
                "MDE AMLA",
                "MDE other",
                "Data Quality",
                "Client Request",
                "Compliance Request"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for memos, where type != input",
            "explode": true,
            "in": "query",
            "name": "not_type",
            "required": false,
            "schema": {
              "enum": [
                "Billing",
                "MDE AMLA",
                "MDE other",
                "Data Quality",
                "Client Request",
                "Compliance Request"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for memos, where type in input",
            "explode": true,
            "in": "query",
            "name": "in_list_type",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "Billing",
                  "MDE AMLA",
                  "MDE other",
                  "Data Quality",
                  "Client Request",
                  "Compliance Request"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for memos, where subject like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "subject",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for memos, where subject notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_subject",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for memos, where subject ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_subject",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for memos, where subject notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_subject",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for memos, where subject isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_subject",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for memos, where desccription like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "desccription",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for memos, where desccription notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_desccription",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for memos, where desccription ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_desccription",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for memos, where desccription notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_desccription",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for memos, where desccription isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_desccription",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for memos, where owner == input",
            "explode": true,
            "in": "query",
            "name": "equal_owner",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for memos, where owner != input",
            "explode": true,
            "in": "query",
            "name": "not_owner",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for memos, where owner in input",
            "explode": true,
            "in": "query",
            "name": "in_list_owner",
            "required": false,
            "schema": { "items": { "type": "integer" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Search for memos, where owner >= input",
            "explode": true,
            "in": "query",
            "name": "gte_owner",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for memos, where owner <= input",
            "explode": true,
            "in": "query",
            "name": "lte_owner",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for memos, where owner isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_owner",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Structure returned when invoking GET all 200",
                    "title": "all_objects",
                    "type": "object"
                  },
                  "type": "array",
                  "x-content-type": "application/json"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified memo ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An memo with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get all memo IDs",
        "tags": ["memo"],
        "x-openapi-router-controller": "swagger_server.controllers.memo_controller"
      },
      "post": {
        "description": "Create a new memo with new id and provided data",
        "operationId": "create_memo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/memo" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/New memo" }
              }
            },
            "description": "memo created"
          },
          "400": {
            "description": "The specified memo ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An memo with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Create a new memo",
        "tags": ["memo"],
        "x-openapi-router-controller": "swagger_server.controllers.memo_controller"
      }
    },
    "/memo/{oid}": {
      "get": {
        "description": "Get a memo by ID",
        "operationId": "get_memo_by_id",
        "parameters": [
          {
            "description": "memo ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "integer" },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/memo" }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified memo ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An memo with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get a memo by ID",
        "tags": ["memo"],
        "x-openapi-router-controller": "swagger_server.controllers.memo_controller"
      },
      "put": {
        "description": "Update the memo with the provided data",
        "operationId": "update_memo_by_id",
        "parameters": [
          {
            "description": "memo ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "integer" },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/memo" }
            }
          },
          "required": true
        },
        "responses": {
          "201": { "description": "memo updated" },
          "400": {
            "description": "The specified memo ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An memo with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Update the memo",
        "tags": ["memo"],
        "x-openapi-router-controller": "swagger_server.controllers.memo_controller"
      }
    },
    "/organization": {
      "get": {
        "description": "Get all organization IDs and names",
        "operationId": "get_organizations",
        "parameters": [
          {
            "description": "Offset for start of  returned records",
            "explode": true,
            "in": "query",
            "name": "OFFSET",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Limit the amount of returned records",
            "explode": true,
            "in": "query",
            "name": "LIMIT",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Column used for sorting. The format is [+|-]<column_name>",
            "explode": true,
            "in": "query",
            "name": "ORDER_BY",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Specifies the fields to be returned. Default: Empty List, in which case __repr__ is returned as name>",
            "explode": true,
            "in": "query",
            "name": "LIST_FIELDS",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "created_on",
                  "changed_on",
                  "created_by",
                  "changed_by",
                  "id",
                  "name",
                  "owner"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for organizations, where created_on >= input",
            "explode": true,
            "in": "query",
            "name": "gte_created_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where created_on <= input",
            "explode": true,
            "in": "query",
            "name": "lte_created_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where changed_on >= input",
            "explode": true,
            "in": "query",
            "name": "gte_changed_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where changed_on <= input",
            "explode": true,
            "in": "query",
            "name": "lte_changed_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where created_by like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where created_by notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where created_by ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where created_by notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where changed_by like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where changed_by notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where changed_by ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where changed_by notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where id == input",
            "explode": true,
            "in": "query",
            "name": "equal_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where id != input",
            "explode": true,
            "in": "query",
            "name": "not_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where id in input",
            "explode": true,
            "in": "query",
            "name": "in_list_id",
            "required": false,
            "schema": { "items": { "type": "integer" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where id >= input",
            "explode": true,
            "in": "query",
            "name": "gte_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where id <= input",
            "explode": true,
            "in": "query",
            "name": "lte_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where name like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where name notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where name ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where name notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where owner like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "owner",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where owner notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_owner",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where owner ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_owner",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for organizations, where owner notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_owner",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Structure returned when invoking GET all 200",
                    "title": "all_objects",
                    "type": "object"
                  },
                  "type": "array",
                  "x-content-type": "application/json"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified organization ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An organization with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get all organization IDs",
        "tags": ["organization"],
        "x-openapi-router-controller": "swagger_server.controllers.organization_controller"
      },
      "post": {
        "description": "Create a new organization with new id and provided data",
        "operationId": "create_organization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/organization" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/New organization" }
              }
            },
            "description": "organization created"
          },
          "400": {
            "description": "The specified organization ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An organization with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Create a new organization",
        "tags": ["organization"],
        "x-openapi-router-controller": "swagger_server.controllers.organization_controller"
      }
    },
    "/organization/{oid}": {
      "delete": {
        "description": "Delete the organization with the provided id",
        "operationId": "delete_organization_by_id",
        "parameters": [
          {
            "description": "organization ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "integer" },
            "style": "simple"
          }
        ],
        "responses": {
          "201": { "description": "organization deleted" },
          "400": {
            "description": "The specified organization ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An organization with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Delete the organization",
        "tags": ["organization"],
        "x-openapi-router-controller": "swagger_server.controllers.organization_controller"
      },
      "get": {
        "description": "Get a organization by ID",
        "operationId": "get_organization_by_id",
        "parameters": [
          {
            "description": "organization ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "integer" },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/organization" }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified organization ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An organization with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get a organization by ID",
        "tags": ["organization"],
        "x-openapi-router-controller": "swagger_server.controllers.organization_controller"
      },
      "put": {
        "description": "Update the organization with the provided data",
        "operationId": "update_organization_by_id",
        "parameters": [
          {
            "description": "organization ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "integer" },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/organization" }
            }
          },
          "required": true
        },
        "responses": {
          "201": { "description": "organization updated" },
          "400": {
            "description": "The specified organization ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An organization with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Update the organization",
        "tags": ["organization"],
        "x-openapi-router-controller": "swagger_server.controllers.organization_controller"
      }
    },
    "/person": {
      "get": {
        "description": "Get all person IDs and names",
        "operationId": "get_persons",
        "parameters": [
          {
            "description": "Offset for start of  returned records",
            "explode": true,
            "in": "query",
            "name": "OFFSET",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Limit the amount of returned records",
            "explode": true,
            "in": "query",
            "name": "LIMIT",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Column used for sorting. The format is [+|-]<column_name>",
            "explode": true,
            "in": "query",
            "name": "ORDER_BY",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Specifies the fields to be returned. Default: Empty List, in which case __repr__ is returned as name>",
            "explode": true,
            "in": "query",
            "name": "LIST_FIELDS",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "id",
                  "cis_number",
                  "card_number_care",
                  "ap_number_apr",
                  "client_type_commercial",
                  "client_type_consumer",
                  "salutation",
                  "title",
                  "first_name",
                  "last_name",
                  "gender",
                  "date_of_birth",
                  "language",
                  "permit_since",
                  "permit_type",
                  "ch_residency_since",
                  "marital_status",
                  "occupation",
                  "addresses",
                  "id_document_type",
                  "id_document_number",
                  "email",
                  "phone_business",
                  "phone_business_mobile",
                  "phone_mobile",
                  "phone_private",
                  "consent_email",
                  "consent_mobile",
                  "crc",
                  "reference_ch_iban",
                  "branch",
                  "department",
                  "ebak_date",
                  "ebak_type",
                  "employer",
                  "employed_since",
                  "employment_type",
                  "income_gross_annual",
                  "income_change_date",
                  "cs_assets",
                  "cs_assets_since",
                  "third_party_assets",
                  "third_party_assets_since",
                  "swisscard_employee",
                  "status"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for persons, where id == input",
            "explode": true,
            "in": "query",
            "name": "equal_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for persons, where id != input",
            "explode": true,
            "in": "query",
            "name": "not_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for persons, where id in input",
            "explode": true,
            "in": "query",
            "name": "in_list_id",
            "required": false,
            "schema": { "items": { "type": "integer" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Search for persons, where id >= input",
            "explode": true,
            "in": "query",
            "name": "gte_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for persons, where id <= input",
            "explode": true,
            "in": "query",
            "name": "lte_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for persons, where cis_number like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "cis_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where cis_number notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_cis_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where cis_number ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_cis_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where cis_number notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_cis_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where cis_number isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_cis_number",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where card_number_care like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "card_number_care",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where card_number_care notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_card_number_care",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where card_number_care ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_card_number_care",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where card_number_care notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_card_number_care",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where card_number_care isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_card_number_care",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where ap_number_apr like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ap_number_apr",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where ap_number_apr notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_ap_number_apr",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where ap_number_apr ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_ap_number_apr",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where ap_number_apr notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_ap_number_apr",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where ap_number_apr isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_ap_number_apr",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where client_type_commercial == input",
            "explode": true,
            "in": "query",
            "name": "equal_client_type_commercial",
            "required": false,
            "schema": { "enum": ["A", "B", "C", "other"], "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where client_type_commercial != input",
            "explode": true,
            "in": "query",
            "name": "not_client_type_commercial",
            "required": false,
            "schema": { "enum": ["A", "B", "C", "other"], "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where client_type_commercial in input",
            "explode": true,
            "in": "query",
            "name": "in_list_client_type_commercial",
            "required": false,
            "schema": {
              "items": { "enum": ["A", "B", "C", "other"], "type": "string" },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for persons, where client_type_consumer == input",
            "explode": true,
            "in": "query",
            "name": "equal_client_type_consumer",
            "required": false,
            "schema": { "enum": ["A", "B", "C", "other"], "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where client_type_consumer != input",
            "explode": true,
            "in": "query",
            "name": "not_client_type_consumer",
            "required": false,
            "schema": { "enum": ["A", "B", "C", "other"], "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where client_type_consumer in input",
            "explode": true,
            "in": "query",
            "name": "in_list_client_type_consumer",
            "required": false,
            "schema": {
              "items": { "enum": ["A", "B", "C", "other"], "type": "string" },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for persons, where salutation like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "salutation",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where salutation notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_salutation",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where salutation ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_salutation",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where salutation notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_salutation",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where title like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "title",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where title notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_title",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where title ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_title",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where title notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_title",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where first_name like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "first_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where first_name notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_first_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where first_name ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_first_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where first_name notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_first_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where last_name like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "last_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where last_name notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_last_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where last_name ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_last_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where last_name notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_last_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where gender == input",
            "explode": true,
            "in": "query",
            "name": "equal_gender",
            "required": false,
            "schema": { "enum": ["female", "male"], "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where gender != input",
            "explode": true,
            "in": "query",
            "name": "not_gender",
            "required": false,
            "schema": { "enum": ["female", "male"], "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where gender in input",
            "explode": true,
            "in": "query",
            "name": "in_list_gender",
            "required": false,
            "schema": {
              "items": { "enum": ["female", "male"], "type": "string" },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for persons, where date_of_birth >= input",
            "explode": true,
            "in": "query",
            "name": "gte_date_of_birth",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where date_of_birth <= input",
            "explode": true,
            "in": "query",
            "name": "lte_date_of_birth",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where language == input",
            "explode": true,
            "in": "query",
            "name": "equal_language",
            "required": false,
            "schema": {
              "enum": ["german", "english", "french"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for persons, where language != input",
            "explode": true,
            "in": "query",
            "name": "not_language",
            "required": false,
            "schema": {
              "enum": ["german", "english", "french"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for persons, where language in input",
            "explode": true,
            "in": "query",
            "name": "in_list_language",
            "required": false,
            "schema": {
              "items": {
                "enum": ["german", "english", "french"],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for persons, where permit_since >= input",
            "explode": true,
            "in": "query",
            "name": "gte_permit_since",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where permit_since <= input",
            "explode": true,
            "in": "query",
            "name": "lte_permit_since",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where permit_type == input",
            "explode": true,
            "in": "query",
            "name": "equal_permit_type",
            "required": false,
            "schema": {
              "enum": ["None", "Type C", "Type G", "Type S", "other"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for persons, where permit_type != input",
            "explode": true,
            "in": "query",
            "name": "not_permit_type",
            "required": false,
            "schema": {
              "enum": ["None", "Type C", "Type G", "Type S", "other"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for persons, where permit_type in input",
            "explode": true,
            "in": "query",
            "name": "in_list_permit_type",
            "required": false,
            "schema": {
              "items": {
                "enum": ["None", "Type C", "Type G", "Type S", "other"],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for persons, where ch_residency_since >= input",
            "explode": true,
            "in": "query",
            "name": "gte_ch_residency_since",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where ch_residency_since <= input",
            "explode": true,
            "in": "query",
            "name": "lte_ch_residency_since",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where marital_status == input",
            "explode": true,
            "in": "query",
            "name": "equal_marital_status",
            "required": false,
            "schema": {
              "enum": ["single", "married", "divorced", "seperated", "widowed"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for persons, where marital_status != input",
            "explode": true,
            "in": "query",
            "name": "not_marital_status",
            "required": false,
            "schema": {
              "enum": ["single", "married", "divorced", "seperated", "widowed"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for persons, where marital_status in input",
            "explode": true,
            "in": "query",
            "name": "in_list_marital_status",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "single",
                  "married",
                  "divorced",
                  "seperated",
                  "widowed"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for persons, where occupation like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "occupation",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where occupation notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_occupation",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where occupation ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_occupation",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where occupation notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_occupation",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where occupation isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_occupation",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where addresses isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_addresses",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where id_document_type like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "id_document_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where id_document_type notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_id_document_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where id_document_type ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_id_document_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where id_document_type notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_id_document_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where id_document_type isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_id_document_type",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where id_document_number like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "id_document_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where id_document_number notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_id_document_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where id_document_number ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_id_document_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where id_document_number notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_id_document_number",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where id_document_number isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_id_document_number",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where email like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "email",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where email notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_email",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where email ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_email",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where email notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_email",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where email isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_email",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_business like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "phone_business",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_business notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_phone_business",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_business ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_phone_business",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_business notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_phone_business",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_business isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_phone_business",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_business_mobile like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "phone_business_mobile",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_business_mobile notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_phone_business_mobile",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_business_mobile ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_phone_business_mobile",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_business_mobile notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_phone_business_mobile",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_business_mobile isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_phone_business_mobile",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_mobile like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "phone_mobile",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_mobile notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_phone_mobile",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_mobile ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_phone_mobile",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_mobile notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_phone_mobile",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_mobile isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_phone_mobile",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_private like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "phone_private",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_private notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_phone_private",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_private ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_phone_private",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_private notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_phone_private",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where phone_private isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_phone_private",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where consent_email like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "consent_email",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where consent_email notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_consent_email",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where consent_email ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_consent_email",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where consent_email notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_consent_email",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where consent_email isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_consent_email",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where consent_mobile like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "consent_mobile",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where consent_mobile notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_consent_mobile",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where consent_mobile ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_consent_mobile",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where consent_mobile notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_consent_mobile",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where consent_mobile isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_consent_mobile",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where crc like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "crc",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where crc notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_crc",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where crc ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_crc",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where crc notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_crc",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where crc isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_crc",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where reference_ch_iban like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "reference_ch_iban",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where reference_ch_iban notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_reference_ch_iban",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where reference_ch_iban ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_reference_ch_iban",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where reference_ch_iban notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_reference_ch_iban",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where reference_ch_iban isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_reference_ch_iban",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where branch like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "branch",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where branch notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_branch",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where branch ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_branch",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where branch notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_branch",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where branch isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_branch",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where department like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "department",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where department notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_department",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where department ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_department",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where department notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_department",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where department isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_department",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where ebak_date >= input",
            "explode": true,
            "in": "query",
            "name": "gte_ebak_date",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where ebak_date <= input",
            "explode": true,
            "in": "query",
            "name": "lte_ebak_date",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where ebak_date isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_ebak_date",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where ebak_type like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ebak_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where ebak_type notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_ebak_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where ebak_type ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_ebak_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where ebak_type notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_ebak_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where ebak_type isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_ebak_type",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where employer like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "employer",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where employer notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_employer",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where employer ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_employer",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where employer notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_employer",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where employer isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_employer",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where employed_since >= input",
            "explode": true,
            "in": "query",
            "name": "gte_employed_since",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where employed_since <= input",
            "explode": true,
            "in": "query",
            "name": "lte_employed_since",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where employed_since isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_employed_since",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where employment_type like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "employment_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where employment_type notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_employment_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where employment_type ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_employment_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where employment_type notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_employment_type",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where employment_type isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_employment_type",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where income_gross_annual >= input",
            "explode": true,
            "in": "query",
            "name": "gte_income_gross_annual",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for persons, where income_gross_annual <= input",
            "explode": true,
            "in": "query",
            "name": "lte_income_gross_annual",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for persons, where income_gross_annual isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_income_gross_annual",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where income_change_date >= input",
            "explode": true,
            "in": "query",
            "name": "gte_income_change_date",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where income_change_date <= input",
            "explode": true,
            "in": "query",
            "name": "lte_income_change_date",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where income_change_date isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_income_change_date",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where cs_assets >= input",
            "explode": true,
            "in": "query",
            "name": "gte_cs_assets",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for persons, where cs_assets <= input",
            "explode": true,
            "in": "query",
            "name": "lte_cs_assets",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for persons, where cs_assets isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_cs_assets",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where cs_assets_since >= input",
            "explode": true,
            "in": "query",
            "name": "gte_cs_assets_since",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where cs_assets_since <= input",
            "explode": true,
            "in": "query",
            "name": "lte_cs_assets_since",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where cs_assets_since isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_cs_assets_since",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where third_party_assets >= input",
            "explode": true,
            "in": "query",
            "name": "gte_third_party_assets",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for persons, where third_party_assets <= input",
            "explode": true,
            "in": "query",
            "name": "lte_third_party_assets",
            "required": false,
            "schema": { "type": "number" },
            "style": "form"
          },
          {
            "description": "Search for persons, where third_party_assets isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_third_party_assets",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where third_party_assets_since >= input",
            "explode": true,
            "in": "query",
            "name": "gte_third_party_assets_since",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where third_party_assets_since <= input",
            "explode": true,
            "in": "query",
            "name": "lte_third_party_assets_since",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for persons, where third_party_assets_since isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_third_party_assets_since",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          },
          {
            "description": "Search for persons, where swisscard_employee == input",
            "explode": true,
            "in": "query",
            "name": "equal_swisscard_employee",
            "required": false,
            "schema": {
              "enum": ["Regular", "Executive", "Board", "other"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for persons, where swisscard_employee != input",
            "explode": true,
            "in": "query",
            "name": "not_swisscard_employee",
            "required": false,
            "schema": {
              "enum": ["Regular", "Executive", "Board", "other"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for persons, where swisscard_employee in input",
            "explode": true,
            "in": "query",
            "name": "in_list_swisscard_employee",
            "required": false,
            "schema": {
              "items": {
                "enum": ["Regular", "Executive", "Board", "other"],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for persons, where status == input",
            "explode": true,
            "in": "query",
            "name": "equal_status",
            "required": false,
            "schema": {
              "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for persons, where status != input",
            "explode": true,
            "in": "query",
            "name": "not_status",
            "required": false,
            "schema": {
              "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for persons, where status in input",
            "explode": true,
            "in": "query",
            "name": "in_list_status",
            "required": false,
            "schema": {
              "items": {
                "enum": ["Active", "DQ Earmark", "Blocked", "Closed"],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Structure returned when invoking GET all 200",
                    "title": "all_objects",
                    "type": "object"
                  },
                  "type": "array",
                  "x-content-type": "application/json"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified person ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An person with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get all person IDs",
        "tags": ["person"],
        "x-openapi-router-controller": "swagger_server.controllers.person_controller"
      },
      "post": {
        "description": "Create a new person with new id and provided data",
        "operationId": "create_person",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/person" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/New person" }
              }
            },
            "description": "person created"
          },
          "400": {
            "description": "The specified person ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An person with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Create a new person",
        "tags": ["person"],
        "x-openapi-router-controller": "swagger_server.controllers.person_controller"
      }
    },
    "/person/{oid}": {
      "get": {
        "description": "Get a person by ID",
        "operationId": "get_person_by_id",
        "parameters": [
          {
            "description": "person ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "integer" },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/person" }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified person ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An person with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get a person by ID",
        "tags": ["person"],
        "x-openapi-router-controller": "swagger_server.controllers.person_controller"
      },
      "put": {
        "description": "Update the person with the provided data",
        "operationId": "update_person_by_id",
        "parameters": [
          {
            "description": "person ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "integer" },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/person" }
            }
          },
          "required": true
        },
        "responses": {
          "201": { "description": "person updated" },
          "400": {
            "description": "The specified person ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An person with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Update the person",
        "tags": ["person"],
        "x-openapi-router-controller": "swagger_server.controllers.person_controller"
      }
    },
    "/person_role": {
      "get": {
        "description": "Get all person_role IDs and names",
        "operationId": "get_person_roles",
        "parameters": [
          {
            "description": "Offset for start of  returned records",
            "explode": true,
            "in": "query",
            "name": "OFFSET",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Limit the amount of returned records",
            "explode": true,
            "in": "query",
            "name": "LIMIT",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Column used for sorting. The format is [+|-]<column_name>",
            "explode": true,
            "in": "query",
            "name": "ORDER_BY",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Specifies the fields to be returned. Default: Empty List, in which case __repr__ is returned as name>",
            "explode": true,
            "in": "query",
            "name": "LIST_FIELDS",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "created_on",
                  "changed_on",
                  "created_by",
                  "changed_by",
                  "id",
                  "person_id",
                  "role",
                  "taggable_entity_id",
                  "matching_status"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where created_on >= input",
            "explode": true,
            "in": "query",
            "name": "gte_created_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where created_on <= input",
            "explode": true,
            "in": "query",
            "name": "lte_created_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where changed_on >= input",
            "explode": true,
            "in": "query",
            "name": "gte_changed_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where changed_on <= input",
            "explode": true,
            "in": "query",
            "name": "lte_changed_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where created_by like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where created_by notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where created_by ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where created_by notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where changed_by like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where changed_by notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where changed_by ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where changed_by notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where id == input",
            "explode": true,
            "in": "query",
            "name": "equal_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where id != input",
            "explode": true,
            "in": "query",
            "name": "not_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where id in input",
            "explode": true,
            "in": "query",
            "name": "in_list_id",
            "required": false,
            "schema": { "items": { "type": "integer" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where id >= input",
            "explode": true,
            "in": "query",
            "name": "gte_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where id <= input",
            "explode": true,
            "in": "query",
            "name": "lte_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where person_id == input",
            "explode": true,
            "in": "query",
            "name": "equal_person_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where person_id != input",
            "explode": true,
            "in": "query",
            "name": "not_person_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where person_id in input",
            "explode": true,
            "in": "query",
            "name": "in_list_person_id",
            "required": false,
            "schema": { "items": { "type": "integer" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where person_id >= input",
            "explode": true,
            "in": "query",
            "name": "gte_person_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where person_id <= input",
            "explode": true,
            "in": "query",
            "name": "lte_person_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where role == input",
            "explode": true,
            "in": "query",
            "name": "equal_role",
            "required": false,
            "schema": {
              "enum": [
                "Commercial Card Holder",
                "Beneficial Owner",
                "Company Owner",
                "Trustee",
                "Settlor",
                "Grantor",
                "Founder",
                "Beneficiary",
                "Power of Attorney",
                "Authorised Signatory",
                "Purchasing Account",
                "others"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where role != input",
            "explode": true,
            "in": "query",
            "name": "not_role",
            "required": false,
            "schema": {
              "enum": [
                "Commercial Card Holder",
                "Beneficial Owner",
                "Company Owner",
                "Trustee",
                "Settlor",
                "Grantor",
                "Founder",
                "Beneficiary",
                "Power of Attorney",
                "Authorised Signatory",
                "Purchasing Account",
                "others"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where role in input",
            "explode": true,
            "in": "query",
            "name": "in_list_role",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "Commercial Card Holder",
                  "Beneficial Owner",
                  "Company Owner",
                  "Trustee",
                  "Settlor",
                  "Grantor",
                  "Founder",
                  "Beneficiary",
                  "Power of Attorney",
                  "Authorised Signatory",
                  "Purchasing Account",
                  "others"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where taggable_entity_id == input",
            "explode": true,
            "in": "query",
            "name": "equal_taggable_entity_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where taggable_entity_id != input",
            "explode": true,
            "in": "query",
            "name": "not_taggable_entity_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where taggable_entity_id in input",
            "explode": true,
            "in": "query",
            "name": "in_list_taggable_entity_id",
            "required": false,
            "schema": { "items": { "type": "integer" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where taggable_entity_id >= input",
            "explode": true,
            "in": "query",
            "name": "gte_taggable_entity_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where taggable_entity_id <= input",
            "explode": true,
            "in": "query",
            "name": "lte_taggable_entity_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where matching_status like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "matching_status",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where matching_status notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_matching_status",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where matching_status ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_matching_status",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where matching_status notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_matching_status",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for person_roles, where matching_status isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_matching_status",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Structure returned when invoking GET all 200",
                    "title": "all_objects",
                    "type": "object"
                  },
                  "type": "array",
                  "x-content-type": "application/json"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified person_role ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An person_role with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get all person_role IDs",
        "tags": ["person_role"],
        "x-openapi-router-controller": "swagger_server.controllers.person_role_controller"
      },
      "post": {
        "description": "Create a new person_role with new id and provided data",
        "operationId": "create_person_role",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/person_role" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/New person_role" }
              }
            },
            "description": "person_role created"
          },
          "400": {
            "description": "The specified person_role ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An person_role with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Create a new person_role",
        "tags": ["person_role"],
        "x-openapi-router-controller": "swagger_server.controllers.person_role_controller"
      }
    },
    "/person_role/{oid}": {
      "get": {
        "description": "Get a person_role by ID",
        "operationId": "get_person_role_by_id",
        "parameters": [
          {
            "description": "person_role ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "integer" },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/person_role" }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified person_role ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An person_role with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get a person_role by ID",
        "tags": ["person_role"],
        "x-openapi-router-controller": "swagger_server.controllers.person_role_controller"
      },
      "put": {
        "description": "Update the person_role with the provided data",
        "operationId": "update_person_role_by_id",
        "parameters": [
          {
            "description": "person_role ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "integer" },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/person_role" }
            }
          },
          "required": true
        },
        "responses": {
          "201": { "description": "person_role updated" },
          "400": {
            "description": "The specified person_role ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An person_role with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Update the person_role",
        "tags": ["person_role"],
        "x-openapi-router-controller": "swagger_server.controllers.person_role_controller"
      }
    },
    "/tag": {
      "get": {
        "description": "Get all tag IDs and names",
        "operationId": "get_tags",
        "parameters": [
          {
            "description": "Offset for start of  returned records",
            "explode": true,
            "in": "query",
            "name": "OFFSET",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Limit the amount of returned records",
            "explode": true,
            "in": "query",
            "name": "LIMIT",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Column used for sorting. The format is [+|-]<column_name>",
            "explode": true,
            "in": "query",
            "name": "ORDER_BY",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Specifies the fields to be returned. Default: Empty List, in which case __repr__ is returned as name>",
            "explode": true,
            "in": "query",
            "name": "LIST_FIELDS",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "created_on",
                  "changed_on",
                  "created_by",
                  "changed_by",
                  "id",
                  "description"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for tags, where created_on >= input",
            "explode": true,
            "in": "query",
            "name": "gte_created_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for tags, where created_on <= input",
            "explode": true,
            "in": "query",
            "name": "lte_created_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for tags, where changed_on >= input",
            "explode": true,
            "in": "query",
            "name": "gte_changed_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for tags, where changed_on <= input",
            "explode": true,
            "in": "query",
            "name": "lte_changed_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for tags, where created_by like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for tags, where created_by notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for tags, where created_by ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for tags, where created_by notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for tags, where changed_by like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for tags, where changed_by notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for tags, where changed_by ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for tags, where changed_by notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for tags, where id == input",
            "explode": true,
            "in": "query",
            "name": "equal_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for tags, where id != input",
            "explode": true,
            "in": "query",
            "name": "not_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for tags, where id in input",
            "explode": true,
            "in": "query",
            "name": "in_list_id",
            "required": false,
            "schema": { "items": { "type": "integer" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Search for tags, where id >= input",
            "explode": true,
            "in": "query",
            "name": "gte_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for tags, where id <= input",
            "explode": true,
            "in": "query",
            "name": "lte_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for tags, where description like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "description",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for tags, where description notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_description",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for tags, where description ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_description",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for tags, where description notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_description",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for tags, where description isNull input",
            "explode": true,
            "in": "query",
            "name": "isnull_description",
            "required": false,
            "schema": { "type": "boolean" },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Structure returned when invoking GET all 200",
                    "title": "all_objects",
                    "type": "object"
                  },
                  "type": "array",
                  "x-content-type": "application/json"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified tag ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An tag with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get all tag IDs",
        "tags": ["tag"],
        "x-openapi-router-controller": "swagger_server.controllers.tag_controller"
      },
      "post": {
        "description": "Create a new tag with new id and provided data",
        "operationId": "create_tag",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/tag" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/New tag" }
              }
            },
            "description": "tag created"
          },
          "400": {
            "description": "The specified tag ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An tag with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Create a new tag",
        "tags": ["tag"],
        "x-openapi-router-controller": "swagger_server.controllers.tag_controller"
      }
    },
    "/tag/{oid}": {
      "get": {
        "description": "Get a tag by ID",
        "operationId": "get_tag_by_id",
        "parameters": [
          {
            "description": "tag ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "integer" },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/tag" }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified tag ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An tag with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get a tag by ID",
        "tags": ["tag"],
        "x-openapi-router-controller": "swagger_server.controllers.tag_controller"
      },
      "put": {
        "description": "Update the tag with the provided data",
        "operationId": "update_tag_by_id",
        "parameters": [
          {
            "description": "tag ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "integer" },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/tag" }
            }
          },
          "required": true
        },
        "responses": {
          "201": { "description": "tag updated" },
          "400": {
            "description": "The specified tag ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An tag with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Update the tag",
        "tags": ["tag"],
        "x-openapi-router-controller": "swagger_server.controllers.tag_controller"
      }
    },
    "/user": {
      "get": {
        "description": "Get all user IDs and names",
        "operationId": "get_users",
        "parameters": [
          {
            "description": "Offset for start of  returned records",
            "explode": true,
            "in": "query",
            "name": "OFFSET",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Limit the amount of returned records",
            "explode": true,
            "in": "query",
            "name": "LIMIT",
            "required": false,
            "schema": { "minimum": 1, "type": "integer" },
            "style": "form"
          },
          {
            "description": "Column used for sorting. The format is [+|-]<column_name>",
            "explode": true,
            "in": "query",
            "name": "ORDER_BY",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Specifies the fields to be returned. Default: Empty List, in which case __repr__ is returned as name>",
            "explode": true,
            "in": "query",
            "name": "LIST_FIELDS",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "created_on",
                  "changed_on",
                  "created_by",
                  "changed_by",
                  "id",
                  "username",
                  "email",
                  "name",
                  "notification_frequency"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Search for users, where created_on >= input",
            "explode": true,
            "in": "query",
            "name": "gte_created_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where created_on <= input",
            "explode": true,
            "in": "query",
            "name": "lte_created_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where changed_on >= input",
            "explode": true,
            "in": "query",
            "name": "gte_changed_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where changed_on <= input",
            "explode": true,
            "in": "query",
            "name": "lte_changed_on",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where created_by like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where created_by notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where created_by ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where created_by notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_created_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where changed_by like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where changed_by notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where changed_by ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where changed_by notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_changed_by",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where id == input",
            "explode": true,
            "in": "query",
            "name": "equal_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for users, where id != input",
            "explode": true,
            "in": "query",
            "name": "not_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for users, where id in input",
            "explode": true,
            "in": "query",
            "name": "in_list_id",
            "required": false,
            "schema": { "items": { "type": "integer" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Search for users, where id >= input",
            "explode": true,
            "in": "query",
            "name": "gte_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for users, where id <= input",
            "explode": true,
            "in": "query",
            "name": "lte_id",
            "required": false,
            "schema": { "type": "integer" },
            "style": "form"
          },
          {
            "description": "Search for users, where username like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "username",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where username notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_username",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where username ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_username",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where username notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_username",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where email like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "email",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where email notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_email",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where email ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_email",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where email notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_email",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where name like input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where name notlike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "not_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where name ilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "ilike_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where name notilike input (place the %-wildcard at start and/or end of the input yourself)",
            "explode": true,
            "in": "query",
            "name": "notilike_name",
            "required": false,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "description": "Search for users, where notification_frequency == input",
            "explode": true,
            "in": "query",
            "name": "equal_notification_frequency",
            "required": false,
            "schema": {
              "enum": ["daily", "every other day", "weekly", "monthly"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for users, where notification_frequency != input",
            "explode": true,
            "in": "query",
            "name": "not_notification_frequency",
            "required": false,
            "schema": {
              "enum": ["daily", "every other day", "weekly", "monthly"],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search for users, where notification_frequency in input",
            "explode": true,
            "in": "query",
            "name": "in_list_notification_frequency",
            "required": false,
            "schema": {
              "items": {
                "enum": ["daily", "every other day", "weekly", "monthly"],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Structure returned when invoking GET all 200",
                    "title": "all_objects",
                    "type": "object"
                  },
                  "type": "array",
                  "x-content-type": "application/json"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified user ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An user with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get all user IDs",
        "tags": ["user"],
        "x-openapi-router-controller": "swagger_server.controllers.user_controller"
      },
      "post": {
        "description": "Create a new user with new id and provided data",
        "operationId": "create_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/user" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/New user" }
              }
            },
            "description": "user created"
          },
          "400": {
            "description": "The specified user ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An user with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Create a new user",
        "tags": ["user"],
        "x-openapi-router-controller": "swagger_server.controllers.user_controller"
      }
    },
    "/user/{oid}": {
      "get": {
        "description": "Get a user by ID",
        "operationId": "get_user_by_id",
        "parameters": [
          {
            "description": "user ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "integer" },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/user" }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "The specified user ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An user with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Get a user by ID",
        "tags": ["user"],
        "x-openapi-router-controller": "swagger_server.controllers.user_controller"
      },
      "put": {
        "description": "Update the user with the provided data",
        "operationId": "update_user_by_id",
        "parameters": [
          {
            "description": "user ID",
            "explode": false,
            "in": "path",
            "name": "oid",
            "required": true,
            "schema": { "type": "integer" },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/user" }
            }
          },
          "required": true
        },
        "responses": {
          "201": { "description": "user updated" },
          "400": {
            "description": "The specified user ID is invalid, e.g. failed some consistency checks."
          },
          "404": {
            "description": "An user with the specified ID was not found."
          },
          "500": {
            "description": "An Exception occurred while executing the request"
          },
          "default": { "description": "Unexpected error" }
        },
        "summary": "Update the user",
        "tags": ["user"],
        "x-openapi-router-controller": "swagger_server.controllers.user_controller"
      }
    }
  },
  "security": [{ "sso_auth": [] }],
  "servers": [{ "url": "" }]
}
